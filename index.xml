<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Class &amp; Objects</title>
    <link>http://classandobjects.com/</link>
    <description>Recent content on Class &amp; Objects</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Jul 2017 23:04:59 +0530</lastBuildDate>
    <atom:link href="http://classandobjects.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>4 ways to pass parameters to a method in Ruby</title>
      <link>http://classandobjects.com/tutorial/different_ways_to_pass_parameter_to_method_ruby/</link>
      <pubDate>Mon, 10 Jul 2017 23:04:59 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/different_ways_to_pass_parameter_to_method_ruby/</guid>
      <description>

&lt;p&gt;Recently I have been dreaming and talking a lot about methods. Here are few cool things which I discovered on my way to get better at Ruby. I&amp;rsquo;ll talk about different ways in which we can pass parameters to a method. Continue to find out how many of them did you knew already. You can read my &lt;a href=&#34;http://classandobjects.com/tutorial/instance_method_vs_class_method_in_ruby/&#34;&gt;difference between class methods and instance methods&lt;/a&gt; for some more fun.&lt;/p&gt;

&lt;h2 id=&#34;the-common-method:a07ed1599a14c5f4bae4a0dc31fb7db6&#34;&gt;The common method&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def full_name(first, last)
  &amp;quot;#{first} #{last}&amp;quot;
end

full_name(&#39;sam&#39;, &#39;smith&#39;)
=&amp;gt; &amp;quot;sam smith&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;named-parameters:a07ed1599a14c5f4bae4a0dc31fb7db6&#34;&gt;Named parameters&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def parse(name: &#39;Jhon&#39;, hero: &#39;superman&#39;)
  &amp;quot;I am #{name}, the #{hero}&amp;quot;
end

parse
=&amp;gt; &amp;quot;I am Jhon, the superman&amp;quot;

parse(name: &#39;Harry Potter&#39;, hero: &#39;wizard&#39;)
=&amp;gt; &amp;quot;I am Harry Potter, the wizard&amp;quot;

parse(name: &#39;Luffy&#39;, food: &#39;meat&#39;)
# ArgumentError: unknown keyword: food
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;any-number-of-unnamed-parameters:a07ed1599a14c5f4bae4a0dc31fb7db6&#34;&gt;Any number of unnamed parameters&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def attributes(*args)
 args.join(&#39;, &#39;)
end

attributes(&#39;hi&#39;, &#39;how&#39;, &#39;are&#39;, &#39;you&#39;)
=&amp;gt; &amp;quot;hi, how, are, you&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;any-number-of-named-parameters:a07ed1599a14c5f4bae4a0dc31fb7db6&#34;&gt;Any number of named parameters&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def fields(args = {})
  args.each do |k,v|
    puts k, v
  end
end

fields(name: &#39;adf&#39;, fasd: &#39;fasd&#39;)
name
adf
fasd
fasd
=&amp;gt; {:name=&amp;gt;&amp;quot;adf&amp;quot;, :fasd=&amp;gt;&amp;quot;fasd&amp;quot;}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:a07ed1599a14c5f4bae4a0dc31fb7db6&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We can do mix and match of all these different ways of sending params and create a very robust method. I hope you find this helpful. If I missed somthing do let me know in the comments below. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Understanding the difference between Ruby class method and instance method</title>
      <link>http://classandobjects.com/tutorial/instance_method_vs_class_method_in_ruby/</link>
      <pubDate>Mon, 10 Jul 2017 22:36:48 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/instance_method_vs_class_method_in_ruby/</guid>
      <description>

&lt;p&gt;Though this is a very simple concept. In my early days of using Ruby, I was always confused about which one to use when and why. I came up with the following way to identify if a method should be a class method or an instance method. I hope this will help you also clear the confusion.&lt;/p&gt;

&lt;h2 id=&#34;class-method:6af750d47b9b682ce730084dc3560cf0&#34;&gt;Class Method&lt;/h2&gt;

&lt;p&gt;I think of class methods like function which is going to deal with a collection of Object. Let&amp;rsquo;s say we have a class &lt;code&gt;User&lt;/code&gt; in our case and we want to get the list of all the users. This allows me to ask the question am I dealing with one user or a group of users. Here I know that I want a list of users. Therefore an instance method. Let&amp;rsquo;s say we want to find the User with the best profile picture. All these methods tell us that we are dealing with multiple users and we want to operate on them. In the case of best profile picture, it is a bit more confusing as we are just going to return one instance of the User. Here is how it will look like in the code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User
  def self.all
    # some logic to return all the users
  end

  def self.with_best_profile_pic
    # logic to find out the best profile pic and return that user
  end
end

# Print all the user
User.all
# Output: [&amp;lt;#User1&amp;gt;, &amp;lt;#User2&amp;gt;]

# Find a user with best profile pic in all users
User.with_best_profile_pic
# Output: &amp;lt;#User3&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;instance-method:6af750d47b9b682ce730084dc3560cf0&#34;&gt;Instance Method&lt;/h2&gt;

&lt;p&gt;Instance methods deal with an individual instance of the class. In more object oriented way we would say these methods are the action which the object can take. Like again for our User class, one particular user can do actions like subscribe, log in, etc.&lt;/p&gt;

&lt;p&gt;Here is how it will look in the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User
  def call
    # user calling action will be performed
  end
end

# we first get one of the users
sam = User.with_best_profile_pic
# then we can make that user do any action which we want
sam.call
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Question to ask: Am I dealing with one instance or many instances of the class?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;conclusion:6af750d47b9b682ce730084dc3560cf0&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope that helped you in some way. Thanks for your time. Feel free to add more in the comments below!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Webpack and Yarn with Rails 5</title>
      <link>http://classandobjects.com/tutorial/use_webpack_and_yarn_with_rails/</link>
      <pubDate>Fri, 10 Mar 2017 19:02:43 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/use_webpack_and_yarn_with_rails/</guid>
      <description>

&lt;p&gt;Rails is awesome, agreed? Everyone understood that JavaScript is coming huge and there has to be a community-specific way to integrate React, Angular or &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue&lt;/a&gt; with a rails project.&lt;/p&gt;

&lt;p&gt;There have been partial successful attempts like like &lt;a href=&#34;https://github.com/reactjs/react-rails&#34;&gt;react-rails gem&lt;/a&gt;, &lt;a href=&#34;https://github.com/shakacode/react_on_rails&#34;&gt;react-on-rails&lt;/a&gt;, webpack-rails, etc to help user bring JS in. Still, they all lacked somewhere. So here comes all new &lt;a href=&#34;weblog.rubyonrails.org/2017/2/23/Rails-5-1-beta1/&#34;&gt;Rails 5.1&lt;/a&gt; with &lt;strong&gt;webpack&lt;/strong&gt; and &lt;strong&gt;yarn&lt;/strong&gt; integrated.&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t need to wait for 5.1 to release or try its beta version, all these is is now available via the gem &lt;a href=&#34;https://github.com/rails/webpacker&#34;&gt;webpacker&lt;/a&gt;. In this post I&amp;rsquo;ll cover how we can pull in this gem and start our JavaScript love story in the Rails land gracefully.&lt;/p&gt;

&lt;p&gt;I am doing a post on how to integrate Vue and Rails, so this is a follow up for how to get the app up and running.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-the-webpacker-gem:b2e57e59eb273f2270b8bcec9b7fd15f&#34;&gt;Setting up the Webpacker gem&lt;/h2&gt;

&lt;p&gt;Add the following line to your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;webpacker&#39;, github: &#39;rails/webpacker&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then run the following commands from your bash:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# to install the new gem
bundle
# to configure webpack
bin/rails webpacker:install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate an &lt;code&gt;app/javascript&lt;/code&gt; directory for you. All of the files can now use &lt;code&gt;ES6&lt;/code&gt; syntax. These files will be compiled and available in your &lt;code&gt;/public&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2 id=&#34;what-next:b2e57e59eb273f2270b8bcec9b7fd15f&#34;&gt;What next?&lt;/h2&gt;

&lt;p&gt;You can now create a file in this javascript directory and then we can refer them from any file like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%# like in app/views/layout/application.html.erb %&amp;gt;
&amp;lt;%= javascript_pack_tag &#39;calendar&#39; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;javascript_pack_tag&lt;/code&gt; is helper provided to bring in this files. This will basically import the compiled version of &lt;code&gt;app/javascript/calendar.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So now we have written our first file and we want to use that, so we will want to have our webpack transpile these file for us. We can do so by running the command below in a separate terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/webpack-watcher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will keep watching for all the changes we make to our file and bundle them.&lt;/p&gt;

&lt;h2 id=&#34;installing-packages:b2e57e59eb273f2270b8bcec9b7fd15f&#34;&gt;Installing packages&lt;/h2&gt;

&lt;p&gt;You should also see a &lt;code&gt;package.json&lt;/code&gt; file created in your root which allows you to bring in any npm or bower packages. Let&amp;rsquo;s say we want to install &lt;a href=&#34;https://lodash.com/&#34;&gt;lodash&lt;/a&gt;, we can simply do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add lodash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and now you have this npm asset available along with your rails assets pipeline, pretty cool huh?&lt;/p&gt;

&lt;p&gt;This is very powerful if you don&amp;rsquo;t know. Previously rails developer need to be dependent on some wrapper gem, which will most probably not updated very frequently. So this saves us all those headache.&lt;/p&gt;

&lt;h2 id=&#34;bonus:b2e57e59eb273f2270b8bcec9b7fd15f&#34;&gt;bonus!&lt;/h2&gt;

&lt;p&gt;The webpacker gem tries to help you start your project with ease and thus come with preconfigured with react, vue and angular. You can start using anyone of them with the respective command below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails webpacker:install:react
rails webpacker:install:angular
rails webpacker:install:vue
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:b2e57e59eb273f2270b8bcec9b7fd15f&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are still few things like getting all of these to work while keeping &lt;code&gt;turbolinks&lt;/code&gt; and how to structure the code. All these things are yet to get more concrete. In the meanwhile, whatever we have now is pretty powerful and helps achive a lot. I hope you find this post helpful. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Perfect Atom Setup</title>
      <link>http://classandobjects.com/blogs/the_perfect_atom_setup/</link>
      <pubDate>Fri, 10 Mar 2017 19:02:13 +0530</pubDate>
      
      <guid>http://classandobjects.com/blogs/the_perfect_atom_setup/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://classandobjects.com/images/blogs/atom_logo.png&#34; alt=&#34;atom editor&#34; title=&#34;The ultimate editor atom&#34; style=&#34;padding-right: 30px;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;I love my editor, Atom. I have tried most of them out there and still, I always come back to this one. It is not perfect but I find my peace in its imperfection. Here are few things I do to make my Atom awesome.&lt;/p&gt;

&lt;h2 id=&#34;making-it-beautiful:ee384879cdfa45954460e4af013701dc&#34;&gt;Making it beautiful&lt;/h2&gt;

&lt;p&gt;I am a connoisseur when it comes to beauty. If you want me hooked, be beautiful. I love beautiful code and here is what I do to make my editor look beautiful.&lt;/p&gt;

&lt;h3 id=&#34;ui-theme:ee384879cdfa45954460e4af013701dc&#34;&gt;UI theme&lt;/h3&gt;

&lt;p&gt;I use &lt;a href=&#34;https://atom.io/themes/atom-material-ui&#34;&gt;Atom Material UI&lt;/a&gt;, there are people who may not like this theme but I perfectly adore this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apm install atom-material-ui
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;syntax-theme:ee384879cdfa45954460e4af013701dc&#34;&gt;Syntax Theme&lt;/h3&gt;

&lt;p&gt;This is the most important things you can have in your editor, the right syntax colouring can do magic. This can increase your productivity, reduce eye strain and make the work enjoyable. I take my eyes very seriously so should you. I use &lt;a href=&#34;https://atom.io/themes/spacegray-atom-dark-syntax&#34;&gt;Spacegray Atom Dark Syntax&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apm install spacegray-atom-dark-syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax highlighting in VS Code is better than Atom, but that is a discussion for another day.&lt;/p&gt;

&lt;h3 id=&#34;font-face:ee384879cdfa45954460e4af013701dc&#34;&gt;Font Face&lt;/h3&gt;

&lt;p&gt;The font I personally use is &lt;a href=&#34;https://github.com/adobe-fonts/source-code-pro&#34;&gt;Source Code Pro&lt;/a&gt;, I also like to use &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt; for its symbol translations.&lt;/p&gt;

&lt;h2 id=&#34;making-it-powerful:ee384879cdfa45954460e4af013701dc&#34;&gt;Making it powerful&lt;/h2&gt;

&lt;p&gt;Atom is modular in structure and everything can be added as a package. Here are few packages I use to speed up my workflow.&lt;/p&gt;

&lt;h3 id=&#34;auto-close-html:ee384879cdfa45954460e4af013701dc&#34;&gt;Auto close HTML&lt;/h3&gt;

&lt;p&gt;This is a huge time saver, helps me &lt;a href=&#34;https://atom.io/packages/autoclose-html&#34;&gt;autoclose HTML tags&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apm install autoclose-html
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fold-function:ee384879cdfa45954460e4af013701dc&#34;&gt;Fold Function&lt;/h3&gt;

&lt;p&gt;If you have ever navigated a huge codebase you know how many functions it can have and this package helps &lt;a href=&#34;https://atom.io/packages/fold-functions&#34;&gt;fold functions&lt;/a&gt; and just see their prototype.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apm install fold-functions
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;minimap:ee384879cdfa45954460e4af013701dc&#34;&gt;Minimap&lt;/h3&gt;

&lt;p&gt;This seems like a useless plugin, but I miss it when it&amp;rsquo;s not there. I use it to &lt;a href=&#34;https://atom.io/packages/minimap&#34;&gt;scroll and navigate&lt;/a&gt; the codebase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apm install minimap
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;highlight-selected:ee384879cdfa45954460e4af013701dc&#34;&gt;Highlight Selected&lt;/h3&gt;

&lt;p&gt;This is a must have. Most of the editor has this built in, but we can always install the extension in the atom and make it work. It helps me &lt;a href=&#34;https://atom.io/packages/highlight-selected&#34;&gt;highlight a word and find all its instances&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also install a version which shows &lt;a href=&#34;https://atom.io/packages/minimap-highlight-selected&#34;&gt;highlighted words&lt;/a&gt; in minimap too.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apm install highlight-selected
apm install minimap-highlight-selected
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;linting:ee384879cdfa45954460e4af013701dc&#34;&gt;Linting&lt;/h2&gt;

&lt;p&gt;I use Ruby and JavaScript most of the times and my projects have linting configured, so I like to see the error as I code. So I use &lt;a href=&#34;https://atom.io/packages/linter-ruby&#34;&gt;ruby lint&lt;/a&gt; and &lt;a href=&#34;https://atom.io/packages/linter-eslint&#34;&gt;eslint&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apm install linter-ruby
apm install linter-eslint
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:ee384879cdfa45954460e4af013701dc&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;For someone who is interested this is how my editor looks like:
&lt;img src=&#34;http://classandobjects.com/images/blogs/my_atom_preview.png&#34; alt=&#34;My atom setup&#34; title=&#34;My atom configuration&#34;/&gt;&lt;/p&gt;

&lt;p&gt;If there is anything that you feel I should try, feel free to let me know. My arsenal is always empty for cool technologies. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Multiple Version of Rails Easily</title>
      <link>http://classandobjects.com/tutorial/use_multiple_version_of_rails_using_rbenv_or_rvm/</link>
      <pubDate>Fri, 10 Mar 2017 19:01:30 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/use_multiple_version_of_rails_using_rbenv_or_rvm/</guid>
      <description>&lt;p&gt;Managing rails version on local computer can be a pain. We mostly use &lt;code&gt;rbenv&lt;/code&gt; and &lt;code&gt;rvm&lt;/code&gt; to manage the &lt;code&gt;ruby&lt;/code&gt; version. But it gets difficult to manange version of each gem. In todays world you will want to use &lt;a href=&#34;https://www.docker.com/&#34;&gt;docker&lt;/a&gt; to control you complete environment. Still, there are cases when you want to try out a version of rails, so here is how you can do that.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/90t07lcrwl2scjlrzqdvqgtmb.js&#34; id=&#34;asciicast-90t07lcrwl2scjlrzqdvqgtmb&#34; async&gt;&lt;/script&gt;

&lt;blockquote&gt;
&lt;p&gt;credit: this &lt;a href=&#34;http://stackoverflow.com/questions/8877772/how-do-you-use-multiple-rails-versions-with-rbenv&#34;&gt;post on StackOverflow&lt;/a&gt; was how I got inspiration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hope this was helpful in some way. Thanks for reading. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The zen of form validation (React)</title>
      <link>http://classandobjects.com/right_form_validation_in_react/</link>
      <pubDate>Thu, 16 Feb 2017 00:13:56 +0530</pubDate>
      
      <guid>http://classandobjects.com/right_form_validation_in_react/</guid>
      <description>

&lt;p&gt;Form validation is complex! With react, it gets even more complicated. In the traditional web, there are inputs and we specify the type, max, min, etc which are validated when the user submits the form. In a slightly more UX focused app you will use &lt;code&gt;jQuery&lt;/code&gt; and it&amp;rsquo;s plugin to give the feedback as user types and interacts with the system. You can see all types of validations happening throughout the web and here are my conclusion after doing some research. I will also share how I plan to solve this excruciating pain in React.&lt;/p&gt;

&lt;p&gt;These are few distilled rules that I come to rely upon which can be followed. They may look very simple but difficult to get right. Here they are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Validate field only when they are touched&lt;/li&gt;
&lt;li&gt;If a field is changing there should be some delay before you validate.&lt;/li&gt;
&lt;li&gt;When submit is attempted then validate all&lt;/li&gt;
&lt;li&gt;Show error above/beside the input, also highlight the input in question.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we are to follow these few rules then we can easily nail down validation. I will quickly and briefly describe them.&lt;/p&gt;

&lt;h3 id=&#34;validate-only-when-a-field-is-touched:a00e322c32e19c56f62ae51e6ffd572f&#34;&gt;Validate only when a field is touched&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s say you have few fields and all are empty by default. Do you like to see all the fields marked as red before you even do anything? NO! So we should only validate fields which user has touched once. By touch I mean not just clicked in the input, it means he/she actually tries to change the value even once. Then we can keep doing validation continuously.&lt;/p&gt;

&lt;h3 id=&#34;delay-before-you-validate:a00e322c32e19c56f62ae51e6ffd572f&#34;&gt;Delay before you validate&lt;/h3&gt;

&lt;p&gt;I bet you have seen this, click on a field called as &lt;code&gt;email&lt;/code&gt;, type the first character and you see an error, this is not a valid email. You just started and you know it&amp;rsquo;s not complete yet. Give some time before you show error in these cases.&lt;/p&gt;

&lt;h3 id=&#34;validate-all-fields-on-submit:a00e322c32e19c56f62ae51e6ffd572f&#34;&gt;Validate all fields on submit&lt;/h3&gt;

&lt;p&gt;Validation on submit is the only way you can validate required fields. It is only when the end user tries to submit the form you will know that he left out the required field(s). Other times we can safely assume that he is still filling in the form.&lt;/p&gt;

&lt;h3 id=&#34;show-error-message-above-beside-and-highlight-the-input-in-question:a00e322c32e19c56f62ae51e6ffd572f&#34;&gt;Show error message above/beside and highlight the input in question&lt;/h3&gt;

&lt;p&gt;This is the goal why we are reading this post. The user doesn&amp;rsquo;t fill in something or fills in the wrong information. We want to avoid that. So we need to show &lt;code&gt;meaningful&lt;/code&gt; and &lt;code&gt;well-located&lt;/code&gt; error messages. According to my reading, people say showing the error on top of the input in question is ideal, but I&amp;rsquo;m not sure on this one. All I am saying is error should be shown as close to the input as possible. Also highlighting the input is a plus to get users attention.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:a00e322c32e19c56f62ae51e6ffd572f&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If you follow these steps you are bound to nail form validation and UX for your application. I am also trying to solve the same problem with React, as you may know, that form validation in React is a pain. In the next article, I&amp;rsquo;ll talk about how can we follow these rules and do the right things in react. I hope you liked the article, thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to configure Jasmine test with React, ES6 and Webpack</title>
      <link>http://classandobjects.com/test_using_jasmine_react_es6_webpack/</link>
      <pubDate>Sat, 11 Feb 2017 15:22:23 +0530</pubDate>
      
      <guid>http://classandobjects.com/test_using_jasmine_react_es6_webpack/</guid>
      <description>

&lt;p&gt;If you created your app using &lt;code&gt;react_create_app&lt;/code&gt;, congrats! You saved you saved yourself some time. You now have &lt;code&gt;jest&lt;/code&gt; up and running correctly. But chances are you configured your &lt;code&gt;Webpack&lt;/code&gt; and now you want to configure &lt;code&gt;Jasmine&lt;/code&gt; to test your components and do unit testing. Let&amp;rsquo;s see how can we do that:&lt;/p&gt;

&lt;h3 id=&#34;installing-jasmine:a7b602c2db563f0f7ed935347ae2f6b7&#34;&gt;Installing Jasmine&lt;/h3&gt;

&lt;p&gt;To run your test cases and access jasmine from the command line you will want to install jasmine globally.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g jasmine
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;initialize-jasmine:a7b602c2db563f0f7ed935347ae2f6b7&#34;&gt;Initialize jasmine&lt;/h3&gt;

&lt;p&gt;Jasmine needs some configuration to know where your tests are and what needs to be done with them. Run the below command to initialize the repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jasmine init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will create a &lt;code&gt;jasmine.json&lt;/code&gt; file, which will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  // dirctory under which files exists
  &amp;quot;spec_dir&amp;quot;: &amp;quot;app/javascript&amp;quot;,
  // naming convention of the file, i.e. file ending in spec.js
  &amp;quot;spec_files&amp;quot;: [
    &amp;quot;**/*[sS]pec.js&amp;quot;
  ],
  // helper files are run before specs
  &amp;quot;helpers&amp;quot;: [
    &amp;quot;spec_helpers/**/*.js&amp;quot;
  ],
  &amp;quot;stopSpecOnExpectationFailure&amp;quot;: false,
  &amp;quot;random&amp;quot;: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S. Please remove all comments if you copy the above json&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;make-jasmine-understand-es6:a7b602c2db563f0f7ed935347ae2f6b7&#34;&gt;Make jasmine understand ES6&lt;/h3&gt;

&lt;p&gt;Jasmine cannot understand ES6 syntax by default. So we will have to use &lt;code&gt;babel&lt;/code&gt;. Install babel like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install babel-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create a file called as &lt;code&gt;run.js&lt;/code&gt; you can place it anywhere, I like to keep it in &lt;code&gt;spec/&lt;/code&gt;, which should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import Jasmine from &#39;jasmine&#39;;

let jasmine = new Jasmine();
// modify this line to point to your jasmine.json
jasmine.loadConfigFile(&#39;app/javascript/spec/support/jasmine.json&#39;);
jasmine.execute();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-the-test:a7b602c2db563f0f7ed935347ae2f6b7&#34;&gt;Run the test&lt;/h3&gt;

&lt;p&gt;Finally to run the test, add the following line inside &lt;code&gt;scripts&lt;/code&gt; section of your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;test&amp;quot;: &amp;quot;babel-node app/javascript/spec/run.js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Ensure you point to your &lt;code&gt;run.js&lt;/code&gt; file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;now &lt;code&gt;npm test&lt;/code&gt; will run all your test cases in the spec path specified in jasmine.json file.&lt;/p&gt;

&lt;h3 id=&#34;bonus-handling-webpack-alias:a7b602c2db563f0f7ed935347ae2f6b7&#34;&gt;Bonus: handling webpack alias&lt;/h3&gt;

&lt;p&gt;You should be all good to go, but in case you had some &lt;code&gt;aliases&lt;/code&gt; in your webpack config then you will need to follow this step. Install &lt;code&gt;module-alias&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --save module-alias
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add following line of code in your &lt;code&gt;package.json&lt;/code&gt; at the end:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;_moduleAliases&amp;quot;: {
  &amp;quot;vendor&amp;quot; : &amp;quot;vendor/&amp;quot;,
  &amp;quot;js&amp;quot;: &amp;quot;app/javascript/&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;feel free to change the aliases above, in my case, I had two aliases called as vendor and js. Now in order to get this aliases load before your test start, you will have to create a file in &lt;code&gt;helper/&lt;/code&gt;, I will called it &lt;code&gt;alias_fix.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In that file all you have to do is paste these lines of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import &#39;module-alias/register&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run your tests as usual and everything should work.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:a7b602c2db563f0f7ed935347ae2f6b7&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I hope this was helpful. If you find something which can be improved please let me know in the comments below. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem With React Single Page App</title>
      <link>http://classandobjects.com/tutorial/problems_with_react_single_page_app/</link>
      <pubDate>Sat, 26 Nov 2016 01:35:47 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/problems_with_react_single_page_app/</guid>
      <description>

&lt;p&gt;If you are planning to create a single page app maybe you have heard people recommending React as an option. React is amazing and I am currently using React in almost all the projects. As you may have also heard that React is just the view layer so that means you will have to make choices. The choice about the state management, styling, routing,  app structure, naming conventions and much more. These choices could be fun and intimidating at the same time. I am writing this article to outline my challenges and discovery trying to create single page app using React Js.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://classandobjects.com/images/tutorial/react.png&#34; alt=&#34;react js single page app&#34; title=&#34;single page app issues with react&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-beginning:193c4d247a68848b168cc40000a1dd29&#34;&gt;The Beginning&lt;/h2&gt;

&lt;p&gt;When I started the project I was sure that my project will be on React. I asked myself how do you start a new React project? The first crossroad was about using ES2015. I knew this was coming to all the browsers still I had to make a choice. Recently facebook has introduced a CLI for React called as React-Create-App, which will do the most recommended setup for you. I assume that you are using this CLI tool to scaffold your project. If you indeed used it, congratulations. You saved yourself the pain of setting these things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EsLint (Helps you follow some rules and ease error identification)&lt;/li&gt;
&lt;li&gt;Babel (Polyfill for ES6 and JSX syntax)&lt;/li&gt;
&lt;li&gt;Webpack (Handle bundling and running babel)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://facebook.github.io/jest/&#34;&gt;Jest&lt;/a&gt; (Testing)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I still  think I haven&amp;rsquo;t mentioned all the things that scaffolding did for you. If instead, you tread on the manual path, you will have to educate yourself about setting up webpack and babel. Differentiate testing frameworks like enzyme and jest. This knowledge is not bad, but it comes in the way of what you actually want to achieve. So this was just setting up the view layer. Let&amp;rsquo;s move on.&lt;/p&gt;

&lt;h2 id=&#34;state-mangement:193c4d247a68848b168cc40000a1dd29&#34;&gt;State Mangement&lt;/h2&gt;

&lt;p&gt;The state is the cool thing in react, which is monitored by React and whenever a state changes the view is updated automagically. Now I asked myself how will I want to manage my states? I was presented with few answers. The idealist in me said Redux, the minimalist said React States, the optimist said &lt;a href=&#34;https://mobxjs.github.io/mobx/&#34;&gt;MobX&lt;/a&gt;. What do you choose???&lt;/p&gt;

&lt;p&gt;If your app is simple you can just get away with React states and never know other libraries ever existed, but if it has some complex state management you may want to consider the others. Redux is the most famous, widely used and mature. If you are building something critical then Redux can give you powerful debugging and testing abilities. If you just want to avoid boilerplate code associated with Redux and want to get the React Magic in state management also, then MobX may be the right things.&lt;/p&gt;

&lt;p&gt;After some blogs, few video lessons and a few sample projects. I decided to go with MobX, so that I have power when I need and I can avoid boilerplate as much as I can. With this checkpoint passed, you are 75% done with the setup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S. I am Rubyist, so boilerplate? NOOO!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;routing:193c4d247a68848b168cc40000a1dd29&#34;&gt;Routing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ReactTraining/react-router&#34;&gt;React-Routers&lt;/a&gt; is the defacto way of routing with React. It also has a simple API and easy to learn. Though there are concepts like Hash History and Browser History. In short, HashHistory is ugly and not to be used in production but easier to setup. The opposite is true for BrowserHistory. In order to use this good looking, preferred BrowserHistory you have to configure the server to return the root page for anything requested. This again feels like a lot of work to me as it should have been easily available out of the box.&lt;/p&gt;

&lt;h2 id=&#34;css-inline-vs-class:193c4d247a68848b168cc40000a1dd29&#34;&gt;CSS Inline vs Class&lt;/h2&gt;

&lt;p&gt;I am pretty sure that your app will have some form of styling. So again you will have to spend time digging through discussion and forums deciding what kind of styling you prefer. This may not be a big deal but it takes time and impact the way you structure your project.&lt;/p&gt;

&lt;h2 id=&#34;application-structure-file-name-conventions:193c4d247a68848b168cc40000a1dd29&#34;&gt;Application Structure, File Name Conventions&lt;/h2&gt;

&lt;p&gt;Again not a difficult part but I like to follow some well-defined conventions so that I do not have to overload my brain with deciding where to place my files and how will I want to name them. Like my &lt;code&gt;&amp;lt;Toolbar /&amp;gt;&lt;/code&gt; should live in &lt;code&gt;toolbar.jsx&lt;/code&gt; , &lt;code&gt;toolbarComponent.js&lt;/code&gt;, &lt;code&gt;Toolbar.componet.js&lt;/code&gt;, &amp;hellip;.&lt;/p&gt;

&lt;p&gt;I think you get the problem. All these options are logically sound and our mind seems to adapt and learn more patterns as we advance in the project. Some time later I may feel bad about the names I chose a few months back.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:193c4d247a68848b168cc40000a1dd29&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Please see these are the things which I find challenging and believe someone will feel the same. If you are fine with all these work I respect your views and choices. I am completely for the React and I love it, but surely this issues warrant my attention to other notable frameworks like &lt;a href=&#34;http://emberjs.com/&#34;&gt;ember.js&lt;/a&gt;. I will like to try out Ember and see how it fits my style of development. I will soon be doing a post on my choices and how I tackled all these problems in the React ecosystem. Then I will redo the same things with Ember and try to note my experience with the same.&lt;/p&gt;

&lt;p&gt;If this post helped you in any way, I would love your appreciation below. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moment.js Cheatsheet</title>
      <link>http://classandobjects.com/tutorial/moment-js-cheatsheet/</link>
      <pubDate>Tue, 15 Nov 2016 21:31:53 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/moment-js-cheatsheet/</guid>
      <description>

&lt;p&gt;Handling date and time in JavaScript could be a pain. I am a ruby enthusiast and one thing which I deeply love about it, is its date and time helper. They are easy to use and very intuitive. In JavaScript world, &lt;a href=&#34;www.momentjs.com&#34;&gt;moment.js&lt;/a&gt; comes for the rescue. It has a lot of functionality but I somehow find its syntax a bit daunting. This post aims to provide a list of few most used methods. It shall also serve as a cheatsheet and reminder to everyone. So let&amp;rsquo;s get started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://classandobjects.com/images/tutorial/momentjs.png&#34; alt=&#34;moment js cheatsheet&#34; title=&#34;Moment js cheatsheet&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-moment:33256c48849067d2e4396387431d6dd8&#34;&gt;The Moment&lt;/h2&gt;

&lt;p&gt;I will speak less and let the code do the talking.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// returns the current time, same as new Date()
moment()

// get moment object from string, though we should not use them as they are ambiguous.
moment(&amp;quot;10-10-1993&amp;quot;)
moment(&amp;quot;01/12/2015&amp;quot;)

// instead use, it makes sure that your dates are interpreted correctly.
moment(&amp;quot;10-10-1993&amp;quot;, &amp;quot;DD-MM-YYYY&amp;quot;)
moment(&amp;quot;01/12/2015&amp;quot;, &amp;quot;DD/MM/YYYY&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a list of few most used parsing tokens:
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Token &lt;/th&gt;
    &lt;th&gt;Description &lt;/th&gt;
    &lt;th&gt;Example &lt;/th&gt;
  &lt;/tr&gt;&lt;/p&gt;

&lt;p&gt;&lt;tr&gt;
    &lt;td&gt;YYYY&lt;/td&gt;
    &lt;td&gt;4 Digit Year&lt;/td&gt;
    &lt;td&gt;2016&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;YY&lt;/td&gt;
    &lt;td&gt;2 Digit Year&lt;/td&gt;
    &lt;td&gt;16&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;MMMM&lt;/td&gt;
    &lt;td&gt;Full Month Name&lt;/td&gt;
    &lt;td&gt;January&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;MMM&lt;/td&gt;
    &lt;td&gt;3 Character Month Name&lt;/td&gt;
    &lt;td&gt;Jan&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;MM&lt;/td&gt;
    &lt;td&gt;2 Digit Month&lt;/td&gt;
    &lt;td&gt;02&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;M&lt;/td&gt;
    &lt;td&gt;1 or 2 Digit Month&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;DD&lt;/td&gt;
    &lt;td&gt;2 Digit Date&lt;/td&gt;
    &lt;td&gt;09&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;D&lt;/td&gt;
    &lt;td&gt;1 or 2 Digit Date&lt;/td&gt;
    &lt;td&gt;9&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;M&lt;/td&gt;
    &lt;td&gt;1 or 2 Digit Month&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;HH or H&lt;/td&gt;
    &lt;td&gt;1 or 2 Digit Hour 24hrs&lt;/td&gt;
    &lt;td&gt;23&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;hh or h&lt;/td&gt;
    &lt;td&gt;1 or 2 Digit Hour 12hrs&lt;/td&gt;
    &lt;td&gt;01&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a or A&lt;/td&gt;
    &lt;td&gt;Am/Pm&lt;/td&gt;
    &lt;td&gt;PM&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;m or mm&lt;/td&gt;
    &lt;td&gt;Minutes&lt;/td&gt;
    &lt;td&gt;59&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;s or ss&lt;/td&gt;
    &lt;td&gt;Seconds&lt;/td&gt;
    &lt;td&gt;23&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: lower case tokens are used for time and upper case tokens are used for date.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;breaking-the-moment:33256c48849067d2e4396387431d6dd8&#34;&gt;Breaking The Moment&lt;/h2&gt;

&lt;p&gt;We find ourself most of the time accessing different pieces of information stored in the moment object. It can be &lt;code&gt;date, hour, seconds, etc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// create the moment object
var now = moment();

// to get todays date
now.date()
now.hour()
now.minute()
now.second()

// we also have get method on moment
now.get(&#39;day&#39;) // returns day of the week
now.get(&#39;millisecond&#39;)

// get unix time
now.unix()

// I have specified the list of all possible vales you can use in get, add and subtract method in the below section.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;play-the-moment:33256c48849067d2e4396387431d6dd8&#34;&gt;Play the Moment&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var now = moment()

// clone moment
var current = moment(now)
// change to utc
now.utc()
// validate the time object
now.isValid()

// add value to a time
// prototype: moment().add(value, scale)
now.add(3, &#39;hours&#39;);
now.subtract(7, &#39;days&#39;)

// jumping to some time
now.startOf(&#39;day&#39;)
now.endOf(&#39;month&#39;)

// possible fields to use
var possibleScales = [year, month, quarter, week, isoWeek, day, date, hour, minute, second]

// use any available token to format time as you need
now.format(&#39;hh:mm a&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;moment.js methods like add and subtract mutates the object itself. This can cause an unseen bug if you are not aware!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;conclusion:33256c48849067d2e4396387431d6dd8&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Moment.js is very helpful to solve date and time related problems in javascript. It was created to be easy and powerful. With the right exposure we can get our work done easily with &lt;code&gt;momentjs&lt;/code&gt;. If you liked the post, please let us know how can we improve. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sublime vs Atom vs VS Code</title>
      <link>http://classandobjects.com/tutorial/sublime-vs-atom-vs-vscode/</link>
      <pubDate>Fri, 11 Nov 2016 21:14:48 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/sublime-vs-atom-vs-vscode/</guid>
      <description>

&lt;p&gt;As a software enthusiast, there is nothing which I love more than new technology. I keep my eyes open for phones, laptops and editors. Yes, you got it right. A programmer spends most of his time looking at the screen and from that most of the time staring at the jumble of words known as code. I like fast, good looking and easy to use editors. According to me Sublime Text, Atom and Visual Studio Code are the best options right now. I have used all of them in real world projects and here are my reviews.&lt;/p&gt;

&lt;h2 id=&#34;sublime-text:1136af4fc3797f4bb7a018c4eabe4463&#34;&gt;Sublime Text&lt;/h2&gt;

&lt;p&gt;The oldest in the guild yet the fastest. You won&amp;rsquo;t be disappointed if you picked up this time tasted editor. I have used sublime the longest and I am always happy to use it. Though, I have faced few issues with linting and other extensions.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fast&lt;/li&gt;
&lt;li&gt;Light&lt;/li&gt;
&lt;li&gt;Good Theme Support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linting&lt;/li&gt;
&lt;li&gt;Git tools&lt;/li&gt;
&lt;li&gt;Debugging&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;atom:1136af4fc3797f4bb7a018c4eabe4463&#34;&gt;Atom&lt;/h2&gt;

&lt;p&gt;This editor is my favourite currently and I use this one mostly. It is made by GitHub and has a plethora of extension that makes it really useful.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Best Looking&lt;/li&gt;
&lt;li&gt;Highly Customizable&lt;/li&gt;
&lt;li&gt;Linting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Slower than Sublime&lt;/li&gt;
&lt;li&gt;No VS Code like Git visual integration&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;vs-code:1136af4fc3797f4bb7a018c4eabe4463&#34;&gt;VS Code&lt;/h2&gt;

&lt;p&gt;This is the youngest editor here, it is also based on the same &lt;code&gt;electron&lt;/code&gt; core used in Atom. It has an amazing GitHub Interactive tool that makes life very easy. It also supports easy debugging for people into JavaScript.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazing Git Tool&lt;/li&gt;
&lt;li&gt;Debugging Support&lt;/li&gt;
&lt;li&gt;Fast&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bad Theme&lt;/li&gt;
&lt;li&gt;The current version has a bug which doesn&amp;rsquo;t match tags&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion:1136af4fc3797f4bb7a018c4eabe4463&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I feel that all these options are amazing. It is a matter of personal taste than anything else. I find my comfort with Atom, but I do remember the speed of Sublime and amazing git tool from VS Code. Feel free to let me know if I missed something by commenting below. Thanks for reading&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Best Quotes App on Android</title>
      <link>http://classandobjects.com/blogs/best_quotes_app_android/</link>
      <pubDate>Sat, 24 Sep 2016 21:33:12 +0530</pubDate>
      
      <guid>http://classandobjects.com/blogs/best_quotes_app_android/</guid>
      <description>

&lt;p&gt;If you are looking for motivation and inspiration, there is no other thing in the world like a Quote. Timeless words which will always mean something and bring out the best in you. Here are my listing for best quotes app on Android Play Store.&lt;/p&gt;

&lt;h2 id=&#34;quoted-quotes-with-images-https-play-google-com-store-apps-details-id-com-classandobjects-quoted:dec94a6eeb1b100f5dce1e1e27de8929&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.classandobjects.quoted&#34;&gt;Quoted: Quotes With Images&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://classandobjects.com/images/blogs/quote1.webp&#34; alt=&#34;Quoted Android App&#34; title=&#34;Quoted Android App&#34; style=&#34;width: 100px; padding: 30px; float: right;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;This app lets you &lt;strong&gt;explore&lt;/strong&gt; quotes and images. You can then easily save, share and use this images as wallpaper.&lt;/p&gt;

&lt;h4 id=&#34;pros:dec94a6eeb1b100f5dce1e1e27de8929&#34;&gt;Pros:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Ability to combine different HD images and quotes&lt;/li&gt;
&lt;li&gt;Distraction free mode, which work even offline&lt;/li&gt;
&lt;li&gt;Easy to use interface&lt;/li&gt;
&lt;li&gt;No ads&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;cons:dec94a6eeb1b100f5dce1e1e27de8929&#34;&gt;Cons:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;No category, as the app wants you to explore quotes&lt;/li&gt;
&lt;li&gt;Cannot insert your own quotes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;quotelicious-https-play-google-com-store-apps-details-id-com-marsvard-quotelicious:dec94a6eeb1b100f5dce1e1e27de8929&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.marsvard.quotelicious&#34;&gt;Quotelicious&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://classandobjects.com/images/blogs/quote2.webp&#34; alt=&#34;Quotelicious&#34; title=&#34;Quotelicious App&#34; style=&#34;width: 100px; padding: 30px; float: right;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Good looking and user friendly. One of the best looking app.&lt;/p&gt;

&lt;h4 id=&#34;pros-1:dec94a6eeb1b100f5dce1e1e27de8929&#34;&gt;Pros:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Good user interface&lt;/li&gt;
&lt;li&gt;Uses only graphics backgrond&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;cons-1:dec94a6eeb1b100f5dce1e1e27de8929&#34;&gt;Cons:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;No category&lt;/li&gt;
&lt;li&gt;Cannot insert your own quotes&lt;/li&gt;
&lt;li&gt;Ads&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;quotes-https-play-google-com-store-apps-details-id-com-skollabs-quotes:dec94a6eeb1b100f5dce1e1e27de8929&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.skollabs.quotes&#34;&gt;Quotes&amp;rdquo;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://classandobjects.com/images/blogs/quote3.webp&#34; alt=&#34;Quotes App&#34; title=&#34;Quote app android&#34; style=&#34;width: 100px; padding: 30px; float: right;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Simple and easy.&lt;/p&gt;

&lt;h4 id=&#34;pros-2:dec94a6eeb1b100f5dce1e1e27de8929&#34;&gt;Pros:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Good collection of quotes&lt;/li&gt;
&lt;li&gt;Category wise browsing&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;cons-2:dec94a6eeb1b100f5dce1e1e27de8929&#34;&gt;Cons:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;You don&amp;rsquo;t get to customize images and quotes&lt;/li&gt;
&lt;li&gt;Cannot insert your own quotes&lt;/li&gt;
&lt;li&gt;Ads&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;kwote-quote-maker-https-play-google-com-store-apps-details-id-com-iddiction-kwote:dec94a6eeb1b100f5dce1e1e27de8929&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.iddiction.kwote&#34;&gt;Kwote: Quote Maker&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://classandobjects.com/images/blogs/quote4.webp&#34; alt=&#34;Kwote Android App&#34; title=&#34;Kwote Android App&#34; style=&#34;width: 100px; padding: 30px; float: right;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Simple and easy.&lt;/p&gt;

&lt;h4 id=&#34;pros-3:dec94a6eeb1b100f5dce1e1e27de8929&#34;&gt;Pros:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Easy to use interface&lt;/li&gt;
&lt;li&gt;Lot of features in term of image and background control&lt;/li&gt;
&lt;li&gt;Insert your own quotes&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;cons-3:dec94a6eeb1b100f5dce1e1e27de8929&#34;&gt;Cons:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Lot of features in term of image and background control&lt;/li&gt;
&lt;li&gt;Ads&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion:dec94a6eeb1b100f5dce1e1e27de8929&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;All these apps have a good collection of quotes. They are the best on the playstore. I do not know how some of the top apps you find are completely useless. I hope you try them all and find them useful. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Best Way To Create Bottom Toolbar Like Google Plus Android App</title>
      <link>http://classandobjects.com/tutorial/create_google_plus_like_toolbar_android/</link>
      <pubDate>Tue, 20 Sep 2016 21:46:00 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/create_google_plus_like_toolbar_android/</guid>
      <description>

&lt;p&gt;Android &lt;a href=&#34;https://developer.android.com/reference/android/widget/Toolbar.html&#34;&gt;toolbar&lt;/a&gt; is a neat functionality which replaces the old Actionbar. If you want to create a traditional looking, top positioned toolbar then this article is not for you. If you are looking for something in the line of Google plus bottom bar and have the ability to customize it then you should keep reading. Here are few screenshots to demonstrate what I mean.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://classandobjects.com/images/tutorial/google_plus.jpg&#34; alt=&#34;google plus bottom toolbar screenshot&#34; title=&#34;Google plus bottom bar screenshot&#34; style=&#34;width: 300px; padding-right: 30px;&#34;/&gt;
&lt;img src=&#34;http://classandobjects.com/images/tutorial/quoted.jpg&#34; alt=&#34;quoted android app screenshot&#34; title=&#34;Quoted Android app screenshot&#34; style=&#34;width: 300px&#34;; padding: 20px;&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-layout:13d446a8ab04176aff5163492f84f741&#34;&gt;The Layout&lt;/h2&gt;

&lt;p&gt;Few thing to know before we start, I will not use &lt;code&gt;menu&lt;/code&gt; options, it makes the toolbar creation easier but takes away the power to customize. I am also using &lt;code&gt;svg&lt;/code&gt; imported images as my buttons. This allows me to alter their size on the go without loosing the quality. I will share the code snippets directly and explain as I go, so let us dive into it.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/ankitsinghaniyaz/9f36098bc29446e46ea2bd89b1d15664.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;adding-background-to-image-view-buttons:13d446a8ab04176aff5163492f84f741&#34;&gt;Adding Background To Image View Buttons&lt;/h2&gt;

&lt;p&gt;As you will see above in the button level &lt;code&gt;LinerLayout&lt;/code&gt;, we have a background. You will need to create few drawable files as I will show below. If you do not specify this, the effect which you see when you touch a button will be absent. In some cases when you use svg or png images they may not even appear proper. Here is what you need to put into your drawable folder.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/ankitsinghaniyaz/e2e3677bb1a6babc0ff881a6ad26387f.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;adding-touch-feedback-on-click:13d446a8ab04176aff5163492f84f741&#34;&gt;Adding Touch Feedback on Click&lt;/h2&gt;

&lt;p&gt;You may also want to enable a little haptic touch feedback. This can be done easily. Make sure you &lt;code&gt;hapticFeedbackEnabled=&amp;quot;true&amp;quot;&lt;/code&gt; in your button and wherever you are listening to the button, just add the following line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public  void toggleFont(View view) {
  // this line will enable haptic feedback
  view.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
  Log.d(TAG, &amp;quot;toggleFont&amp;quot;);
  //... do more
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can try out this feature on my live app &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.classandobjects.quoted&#34;&gt;Quoted&lt;/a&gt;, which helps you &lt;em&gt;explore and share quotes&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:13d446a8ab04176aff5163492f84f741&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As you may see implementing a bottom toolbar in android with all functionality is easy. It is just that we have to hunt for information and gather it. I hope you find this article informative if yes do not forget to subscribe. If you have any doubt feel free to leave comments below or email me. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add Subscribe Button to Your Website, also Add a Scroll Triggered Subscribe Box</title>
      <link>http://classandobjects.com/tutorial/add_subscribe_button_on_static_site/</link>
      <pubDate>Fri, 16 Sep 2016 22:35:37 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/add_subscribe_button_on_static_site/</guid>
      <description>

&lt;p&gt;Subscribe button is a useful feature to have on any website. It helps you create loyal audience base and helps your users get amazing content from the blogs they love. It can be quite easy to integrate one on a WordPress site or a website with a backend. In this article, I will show you how to add a subscribe button to any static website using &lt;a href=&#34;www.formspree.io&#34;&gt;formspree.io&lt;/a&gt;, &lt;a href=&#34;https://github.com/hubspot/vex&#34;&gt;Vex js&lt;/a&gt; and javascript. I will also show how you can add a subscribe box(popup) when a user has scrolled the page. I am using Hugo as my static site generator, the process is exactly the same for any static site. So let&amp;rsquo;s get started.&lt;/p&gt;

&lt;h2 id=&#34;setup-vex-js:80997bc7bd7f5c85dacbd7579f4f2263&#34;&gt;Setup Vex js&lt;/h2&gt;

&lt;p&gt;I did my little research and found out Vex js is the best dialogue(popup) creator library. It is &lt;strong&gt;light, good looking and has zero dependencies&lt;/strong&gt;, and that is all we need. First, you will need to &lt;a href=&#34;http://github.hubspot.com/vex/api/themes/&#34;&gt;select a theme&lt;/a&gt;, visit the link to see examples of all the themes which you can use. Select the one you like and download it from here. Also download &lt;code&gt;vex-theme-bottom-right-corner&lt;/code&gt;, if you want to do a subscribe popup after scrolling your page. You will need to &lt;a href=&#34;https://github.com/HubSpot/vex/tree/master/dist/js&#34;&gt;download vex.combined.min.js&lt;/a&gt; from this link. Make sure you have one theme CSS file and one Vex combined js file. Now you will want to store this file to your static directory, where you have your Javascript and CSS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Skip to the next step if you are not using HUGO.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In case of Hugo, I will put it under the themes as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/themes
  /theme-name
    /js
      vex.combined.min.js
    /css
      vex-theme-name.css
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;add-a-subscribe-button:80997bc7bd7f5c85dacbd7579f4f2263&#34;&gt;Add a subscribe button&lt;/h2&gt;

&lt;p&gt;Now, after having set up Vex, we want a form to be shown to the user when  they click the Subscribe button.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;!-- for normal HTML --&amp;gt;
&amp;lt;!-- include css and js like this --&amp;gt;
&amp;lt;script src=&amp;quot;path/to/myscripts.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;path/to/mystyle.css&amp;quot;&amp;gt;
&amp;lt;!-- most of the times they are included in the `footer` partial in Hugo. --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Add this button in your html file --&amp;gt;
&amp;lt;button onclick=&amp;quot;subscribe()&amp;quot;&amp;gt;Subscribe&amp;lt;/button&amp;gt;

&amp;lt;script&amp;gt;
function hide (elements) {
  elements = elements.length ? elements : [elements];
  for (var index = 0; index &amp;lt; elements.length; index++) {
    elements[index].style.display = &#39;none&#39;;
  }
}

function subscribe() {
    // replace vex-theme-plain with the name of your theme
    vex.defaultOptions.className = &#39;vex-theme-plain&#39;;
    var vexId = vex.dialog.open({
    message: &#39;Get latest updates, enter your email:&#39;,
    input: [
        &#39;&amp;lt;input name=&amp;quot;email&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;jhondoe@domain.com&amp;quot; required /&amp;gt;&#39;,
    ].join(&#39;&#39;),
    buttons: [
        $.extend({}, vex.dialog.buttons.YES, { text: &#39;Subscribe&#39; }),
        $.extend({}, vex.dialog.buttons.NO, { text: &#39;Back&#39; })
    ],
    callback: function (data) {
        if (!data) {
                }
                else {
            var email_value = data.email;
                        var form = document.createElement(&amp;quot;form&amp;quot;);
                        form.setAttribute(&#39;method&#39;,&amp;quot;post&amp;quot;);
                        //replace below email with your email
                        form.setAttribute(&#39;action&#39;, &amp;quot;http://formspree.io/classandobjects@gmail.com&amp;quot;);

                        var input = document.createElement(&amp;quot;input&amp;quot;); //input element, text
                        input.setAttribute(&#39;type&#39;,&amp;quot;email&amp;quot;);
                        input.setAttribute(&#39;name&#39;,&amp;quot;email&amp;quot;);
                        input.value = email_value;

                        form.appendChild(input);
                        form.submit();
        }
                // In most cases you wont need the below line, but after clicking submit or cancel if the box does not closes for some reason, you will want to uncommnet the line below.
                // hide(document.querySelectorAll(&#39;.vex&#39;));
    },
    });
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example just replace classandobects@gmail.com with you own email address and the theme name with your selected Vex theme. This should be enough to get you started. Formspree.io allow you to get 1000 emails for free and is fairly easy to use. Until now you have implemented a subscribe option like the one you get when you click the &lt;code&gt;envelope&lt;/code&gt; icon on your left.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TIP: You will have to verify the first email you get via formspree.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;bonus-adding-a-subscribe-form-on-scroll:80997bc7bd7f5c85dacbd7579f4f2263&#34;&gt;Bonus, Adding a subscribe form on scroll&lt;/h2&gt;

&lt;p&gt;Try scrolling below on this site and as you reach around &lt;strong&gt;70%&lt;/strong&gt;, you get a popup to subscribe. You should continue this step if you want to implement something similar to this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: &lt;code&gt;jQuery&lt;/code&gt; is a requirement for this step. There are high chances that you are already using jQuery.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  function createSidePopup() {
    if (document.querySelectorAll(&#39;.vex&#39;).length == 0) {
        vex.defaultOptions.className = &#39;vex-theme-bottom-right-corner&#39;;
        var vexId = vex.dialog.open({
        message: &#39;Why not subscribe for more! Email Please&#39;,
        input: [
            &#39;&amp;lt;input name=&amp;quot;email&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;jhondoe@domain.com&amp;quot; required /&amp;gt;&#39;,
        ].join(&#39;&#39;),
        buttons: [
            $.extend({}, vex.dialog.buttons.YES, { text: &#39;Subscribe&#39; }),
            $.extend({}, vex.dialog.buttons.NO, { text: &#39;Back&#39; })
        ],
        callback: function (data) {
            if (!data) {
                    }
                    else {
                var email_value = data.email;
                            var form = document.createElement(&amp;quot;form&amp;quot;);
                            form.setAttribute(&#39;method&#39;,&amp;quot;post&amp;quot;);
                            form.setAttribute(&#39;action&#39;, &amp;quot;http://formspree.io/classandobjects@gmail.com&amp;quot;);

                            var input = document.createElement(&amp;quot;input&amp;quot;);
                            input.setAttribute(&#39;type&#39;,&amp;quot;email&amp;quot;);
                            input.setAttribute(&#39;name&#39;,&amp;quot;email&amp;quot;);
                            input.value = email_value;

                            form.appendChild(input);
                            form.submit();
            }
                    hide(document.querySelectorAll(&#39;.vex&#39;));
        },
        });
    }
}

function onScrollSubscribePopup () {
    {{ if .IsPage }}
    $(document).ready(function() {
        $(window).scroll(function(e){
            var scrollTop = $(window).scrollTop();
            var docHeight = $(document).height();
            var winHeight = $(window).height();
            var scrollPercent = (scrollTop) / (docHeight - winHeight);
            var scrollPercentRounded = Math.round(scrollPercent*100);
            if (scrollPercentRounded &amp;gt; 70 &amp;amp;&amp;amp; scrollPercentRounded &amp;lt;     80) {
                createSidePopup();
            }
        });
    });
    {{ end }}
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code to calculate the scroll percentage has been taken from this &lt;a href=&#34;https://codepen.io/achudars/pen/Cpast&#34;&gt;codepen&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:80997bc7bd7f5c85dacbd7579f4f2263&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I believe this post was helpful for creating a subscribe button. If you find any issue with the above code or need any help do let me know in the comments below. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to use React and MobX with Rails 5</title>
      <link>http://classandobjects.com/tutorial/using_react_mobx_with_rails/</link>
      <pubDate>Thu, 15 Sep 2016 01:02:27 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/using_react_mobx_with_rails/</guid>
      <description>

&lt;p&gt;MobX is the new state management library which packs really well with react. Mobx makes things much simpler to &lt;code&gt;redux&lt;/code&gt;, which is more famous in react community. I have detailed out the step on how to get started with using mobx and rails 5.&lt;/p&gt;

&lt;h2 id=&#34;install-react-on-rails-gem-https-github-com-shakacode-react-on-rails-blob-master-docs-tutorial-md:c654b3e053ef669dc2fc657f0438b2e3&#34;&gt;Install &lt;a href=&#34;https://github.com/shakacode/react_on_rails/blob/master/docs/tutorial.md&#34;&gt;react_on_rails gem&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;To make mobx functional with rails, I had to drop &lt;code&gt;react-rails&lt;/code&gt; gem and adopt the &lt;code&gt;react_on_rails&lt;/code&gt; gem. Setting it up is cumbersome in the beginning but it pays off well in the long run. React on rails site have a detailed guide on how to setup react_on_rails gem, I&amp;rsquo;ll just quickly brush them up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The below lines are just for reference, you can directly download the &lt;a href=&#34;https://github.com/ankitsinghaniyaz/react-rails-mobx-boilerplate&#34;&gt;react-rails-mobx-boilerplate&lt;/a&gt; from my GitHub repo and get started.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# adding the gem, add the below line to your gem file
gem &#39;react_on_rails&#39;, &#39;~&amp;gt;6&#39;

# Git commit all your changes and then
bundle

# you may need to do git commit again
# below lines will create a sample welcome controller
rails generate react_on_rails:install

# install
bundle &amp;amp;&amp;amp; npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are few things to know about &lt;code&gt;react_on_rails&lt;/code&gt; gem, which can be confusing for starters like me.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# You expose your react module so that it can be available outside
import ReactOnRails from &#39;react-on-rails&#39;;

# register you component
ReactOnRails.register({ Counter });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# you should also keep in mind that when creating new .jsx files
# you should add its path to webpack.config.js entry hash as
const config = {
  entry: [
    &#39;es5-shim/es5-shim&#39;,
    &#39;es5-shim/es5-sham&#39;,
    &#39;babel-polyfill&#39;,
    &#39;./app/welcome/Counter&#39;, // like this
  ],
  .........
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Make sure your Node js version is greater than 5, react_on_rails gem has this requirement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;add-mobx-and-mobx-react:c654b3e053ef669dc2fc657f0438b2e3&#34;&gt;Add Mobx and Mobx React&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# After previous step you will have a client folder
# inside that folder edit the package.json and add the below lines to the dependencies list

&amp;quot;mobx-react&amp;quot;: &amp;quot;^3.5.6&amp;quot;,
&amp;quot;mobx&amp;quot;: &amp;quot;^2.5.1&amp;quot;

# If you will want to use decorators with mobx then make your .babelrc file look something like this

{
  &amp;quot;presets&amp;quot;: [&amp;quot;es2015&amp;quot;, &amp;quot;stage-0&amp;quot;, &amp;quot;react&amp;quot;],
  &amp;quot;plugins&amp;quot;: [&amp;quot;transform-decorators-legacy&amp;quot;]
}

# I was also required to install
npm install babel-plugin-transform-decorators-legacy --save-dev

# finally do npm install to install newly added dependencies
npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bring-it-up:c654b3e053ef669dc2fc657f0438b2e3&#34;&gt;Bring it Up&lt;/h2&gt;

&lt;p&gt;Now you are all set to bring your system up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# create all the database if you are using postgresql as database, else skip, you will need to run this step if you use the boilerplate code
rails db:create # use rake db:create in rails 4 or below

# start the server and webpack client for transpilation
foreman start -f Procfile.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:c654b3e053ef669dc2fc657f0438b2e3&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope you were successfully able to get your system up and running. If I missed something or you have some doubts, do let me know in the comments below. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Things Beginners Find Confusing About React.js</title>
      <link>http://classandobjects.com/tutorial/confusing_things_in_react/</link>
      <pubDate>Fri, 09 Sep 2016 20:12:23 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/confusing_things_in_react/</guid>
      <description>

&lt;p&gt;React js is currently the most hyped front-end framework(view) today. I am lucky that at my current workplace I am getting a chance to explore react and rails. I am a Python lover, but I am completely open to learning new technologies. I have seen confusing things in Ruby on Rails which is very opposite to React and Javascript environment. I am trying to list out things every react js beginner should know. I have pointed out top 5 reasons why React js can be confusing. So let us get started.&lt;/p&gt;

&lt;h2 id=&#34;1-react-is-just-the-view-layer:3222e409acaa90f43374c31f0beac177&#34;&gt;1. React is just the view layer&lt;/h2&gt;

&lt;p&gt;You will not understand what does this mean, I didn&amp;rsquo;t, and it is ok. If you already do not have some understanding of what modern MVC front-end frameworks are then this definition is almost useless. In a simple way, view layer will simply mean a replacement for your HTML, CSS and Javascript(umm.. maybe). These three things make up the view of any web application. So React js provides us with a way to write things in a reusable and powerful way. You still have to do all the things like AJAX, data handling, function naming convention, etc in you own fashion. This gives you a lot of flexibility but at a reduced speed of development.&lt;/p&gt;

&lt;h2 id=&#34;2-jsx-is-not-html-or-xml:3222e409acaa90f43374c31f0beac177&#34;&gt;2. JSX is not HTML or XML&lt;/h2&gt;

&lt;p&gt;React is aimed at being developer friendly and I second it. It uses an XML-like syntax called JSX. It will look like normal HTML, but has few catches. &lt;code&gt;class&lt;/code&gt; is a reserved keyword so you have to use &lt;code&gt;className&lt;/code&gt;, this means you cannot use your HTML code directly, you will have to do a bunch of replacements.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;## Normal HTML
&amp;lt;div class=&amp;quot;row&amp;quot; ... &amp;gt;
## Syntax for React
&amp;lt;div className=&amp;quot;row&amp;quot; ...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are other catches you need to remember, you cannot use independent HTML tags like &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, it is required that you close them like &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Always beware of these gaps as you tend to overlook them, even the error messaging cannot help you much.&lt;/p&gt;

&lt;h2 id=&#34;3-what-should-be-a-component:3222e409acaa90f43374c31f0beac177&#34;&gt;3.  What should be a Component?&lt;/h2&gt;

&lt;p&gt;There is an opinion on what you should make into a component. There are people who believe that any piece of code that is supposed to be used again should be made into a component while other want to do so when you are dealing with states. This is not a big issue, but you will have to adjust yourself according to the developer culture you find yourself in.&lt;/p&gt;

&lt;h2 id=&#34;4-multiple-syntax-options:3222e409acaa90f43374c31f0beac177&#34;&gt;4. Multiple syntax options&lt;/h2&gt;

&lt;p&gt;Javascript is evolving very fast with the advent of these new front-end frameworks. The current syntax is called as ES6 or ES2015, which is a bit different than the older version. This can be very confusing if you do not know this. In your quest to find something you may find resources which can be following the older syntax or the newer one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;## Older Syntax
var aComponent = React.createClass({
  function: render() { ... }
});

## Newer ES6 Syntax
class ComponentB extends React.Component {
  render() { ... }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find the use of the both the syntax in React official documentation. They both work fine but try avoiding mixing them up  and stick to the newer ES6 style.&lt;/p&gt;

&lt;h2 id=&#34;5-how-to-use-it-with-your-existing-application:3222e409acaa90f43374c31f0beac177&#34;&gt;5. How to use it with your existing application&lt;/h2&gt;

&lt;p&gt;React is an independent layer which you will want to include in your already existing full stack solution. They could be a bit daunting. To me using webpack and browsify are a task in themselves. In Rails, we have &lt;code&gt;react-rails&lt;/code&gt; gem which make the task very easy. Undoubtedly there are similar efforts in other community as well. You will find many ways to integrate react, try using the easier one and upgrade as your need increases.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:3222e409acaa90f43374c31f0beac177&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As my conclusion, I will say that React js seem like it will stay in the market for a long time. Even if it does not, it is very easy to learn and does not require a lot of concepts. It is fast and keeps your code DRY. You should try React if you have not tried it yet. It is fun.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>