<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Class &amp; Objects</title>
    <link>http://classandobjects.com/</link>
    <description>Recent content on Class &amp; Objects</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Sep 2016 22:35:37 +0530</lastBuildDate>
    <atom:link href="http://classandobjects.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Add Subscribe Button to Your Website, also Add a Scroll Triggered Subscribe Box</title>
      <link>http://classandobjects.com/tutorial/add_subscribe_button_on_static_site/</link>
      <pubDate>Fri, 16 Sep 2016 22:35:37 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/add_subscribe_button_on_static_site/</guid>
      <description>

&lt;p&gt;Subscribe button is a useful feature to have on any website. It helps you create loyal audience base and helps your users get amazing content from the blogs they love. It can be quite easy to integrate one on a WordPress site or a website with a backend. In this article, I will show you how to add a subscribe button to any static website using &lt;a href=&#34;www.formspree.io&#34;&gt;formspree.io&lt;/a&gt;, &lt;a href=&#34;https://github.com/hubspot/vex&#34;&gt;Vex js&lt;/a&gt; and javascript. I will also show how you can add a subscribe box(popup) when a user has scrolled the page. I am using Hugo as my static site generator, the process is exactly the same for any static site. So let&amp;rsquo;s get started.&lt;/p&gt;

&lt;h2 id=&#34;setup-vex-js&#34;&gt;Setup Vex js&lt;/h2&gt;

&lt;p&gt;I did my little research and found out Vex js is the best dialogue(popup) creator library. It is &lt;strong&gt;light, good looking and has zero dependencies&lt;/strong&gt;, and that is all we need. First, you will need to &lt;a href=&#34;http://github.hubspot.com/vex/api/themes/&#34;&gt;select a theme&lt;/a&gt;, visit the link to see examples of all the themes which you can use. Select the one you like and download it from here. Also download &lt;code&gt;vex-theme-bottom-right-corner&lt;/code&gt;, if you want to do a subscribe popup after scrolling your page. You will need to &lt;a href=&#34;https://github.com/HubSpot/vex/tree/master/dist/js&#34;&gt;download vex.combined.min.js&lt;/a&gt; from this link. Make sure you have one theme CSS file and one Vex combined js file. Now you will want to store this file to your static directory, where you have your Javascript and CSS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Skip to the next step if you are not using HUGO.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In case of Hugo, I will put it under the themes as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/themes
  /theme-name
    /js
      vex.combined.min.js
    /css
      vex-theme-name.css
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;add-a-subscribe-button&#34;&gt;Add a subscribe button&lt;/h2&gt;

&lt;p&gt;Now, after having set up Vex, we want a form to be shown to the user when  they click the Subscribe button.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;!-- for normal HTML --&amp;gt;
&amp;lt;!-- include css and js like this --&amp;gt;
&amp;lt;script src=&amp;quot;path/to/myscripts.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;path/to/mystyle.css&amp;quot;&amp;gt;
&amp;lt;!-- most of the times they are included in the `footer` partial in Hugo. --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Add this button in your html file --&amp;gt;
&amp;lt;button onclick=&amp;quot;subscribe()&amp;quot;&amp;gt;Subscribe&amp;lt;/button&amp;gt;

&amp;lt;script&amp;gt;
function hide (elements) {
  elements = elements.length ? elements : [elements];
  for (var index = 0; index &amp;lt; elements.length; index++) {
    elements[index].style.display = &#39;none&#39;;
  }
}

function subscribe() {
    // replace vex-theme-plain with the name of your theme
    vex.defaultOptions.className = &#39;vex-theme-plain&#39;;
    var vexId = vex.dialog.open({
    message: &#39;Get latest updates, enter your email:&#39;,
    input: [
        &#39;&amp;lt;input name=&amp;quot;email&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;jhondoe@domain.com&amp;quot; required /&amp;gt;&#39;,
    ].join(&#39;&#39;),
    buttons: [
        $.extend({}, vex.dialog.buttons.YES, { text: &#39;Subscribe&#39; }),
        $.extend({}, vex.dialog.buttons.NO, { text: &#39;Back&#39; })
    ],
    callback: function (data) {
        if (!data) {
                }
                else {
            var email_value = data.email;
                        var form = document.createElement(&amp;quot;form&amp;quot;);
                        form.setAttribute(&#39;method&#39;,&amp;quot;post&amp;quot;);
                        //replace below email with your email
                        form.setAttribute(&#39;action&#39;, &amp;quot;http://formspree.io/classandobjects@gmail.com&amp;quot;);

                        var input = document.createElement(&amp;quot;input&amp;quot;); //input element, text
                        input.setAttribute(&#39;type&#39;,&amp;quot;email&amp;quot;);
                        input.setAttribute(&#39;name&#39;,&amp;quot;email&amp;quot;);
                        input.value = email_value;

                        form.appendChild(input);
                        form.submit();
        }
                // In most cases you wont need the below line, but after clicking submit or cancel if the box does not closes for some reason, you will want to uncommnet the line below.
                // hide(document.querySelectorAll(&#39;.vex&#39;));
    },
    });
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example just replace classandobects@gmail.com with you own email address and the theme name with your selected Vex theme. This should be enough to get you started. Formspree.io allow you to get 1000 emails for free and is fairly easy to use. Until now you have implemented a subscribe option like the one you get when you click the &lt;code&gt;envelope&lt;/code&gt; icon on your left.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TIP: You will have to verify the first email you get via formspree.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;bonus-adding-a-subscribe-form-on-scroll&#34;&gt;Bonus, Adding a subscribe form on scroll&lt;/h2&gt;

&lt;p&gt;Try scrolling below on this site and as you reach around &lt;strong&gt;70%&lt;/strong&gt;, you get a popup to subscribe. You should continue this step if you want to implement something similar to this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: &lt;code&gt;jQuery&lt;/code&gt; is a requirement for this step. There are high chances that you are already using jQuery.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  function createSidePopup() {
    if (document.querySelectorAll(&#39;.vex&#39;).length == 0) {
        vex.defaultOptions.className = &#39;vex-theme-bottom-right-corner&#39;;
        var vexId = vex.dialog.open({
        message: &#39;Why not subscribe for more! Email Please&#39;,
        input: [
            &#39;&amp;lt;input name=&amp;quot;email&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;jhondoe@domain.com&amp;quot; required /&amp;gt;&#39;,
        ].join(&#39;&#39;),
        buttons: [
            $.extend({}, vex.dialog.buttons.YES, { text: &#39;Subscribe&#39; }),
            $.extend({}, vex.dialog.buttons.NO, { text: &#39;Back&#39; })
        ],
        callback: function (data) {
            if (!data) {
                    }
                    else {
                var email_value = data.email;
                            var form = document.createElement(&amp;quot;form&amp;quot;);
                            form.setAttribute(&#39;method&#39;,&amp;quot;post&amp;quot;);
                            form.setAttribute(&#39;action&#39;, &amp;quot;http://formspree.io/classandobjects@gmail.com&amp;quot;);

                            var input = document.createElement(&amp;quot;input&amp;quot;);
                            input.setAttribute(&#39;type&#39;,&amp;quot;email&amp;quot;);
                            input.setAttribute(&#39;name&#39;,&amp;quot;email&amp;quot;);
                            input.value = email_value;

                            form.appendChild(input);
                            form.submit();
            }
                    hide(document.querySelectorAll(&#39;.vex&#39;));
        },
        });
    }
}

function onScrollSubscribePopup () {
    {{ if .IsPage }}
    $(document).ready(function() {
        $(window).scroll(function(e){
            var scrollTop = $(window).scrollTop();
            var docHeight = $(document).height();
            var winHeight = $(window).height();
            var scrollPercent = (scrollTop) / (docHeight - winHeight);
            var scrollPercentRounded = Math.round(scrollPercent*100);
            if (scrollPercentRounded &amp;gt; 70 &amp;amp;&amp;amp; scrollPercentRounded &amp;lt;     80) {
                createSidePopup();
            }
        });
    });
    {{ end }}
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code to calculate the scroll percentage has been taken from this &lt;a href=&#34;https://codepen.io/achudars/pen/Cpast&#34;&gt;codepen&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I believe this post was helpful for creating a subscribe button. If you find any issue with the above code or need any help do let me know in the comments below. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to use React and MobX with Rails 5</title>
      <link>http://classandobjects.com/tutorial/using_react_mobx_with_rails/</link>
      <pubDate>Thu, 15 Sep 2016 01:02:27 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/using_react_mobx_with_rails/</guid>
      <description>

&lt;p&gt;MobX is the new state management library which packs really well with react. Mobx makes things much simpler to &lt;code&gt;redux&lt;/code&gt;, which is more famous in react community. I have detailed out the step on how to get started with using mobx and rails 5.&lt;/p&gt;

&lt;h2 id=&#34;install-react-on-rails-gem-https-github-com-shakacode-react-on-rails-blob-master-docs-tutorial-md&#34;&gt;Install &lt;a href=&#34;https://github.com/shakacode/react_on_rails/blob/master/docs/tutorial.md&#34;&gt;react_on_rails gem&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;To make mobx functional with rails, I had to drop &lt;code&gt;react-rails&lt;/code&gt; gem and adopt the &lt;code&gt;react_on_rails&lt;/code&gt; gem. Setting it up is cumbersome in the beginning but it pays off well in the long run. React on rails site have a detailed guide on how to setup react_on_rails gem, I&amp;rsquo;ll just quickly brush them up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The below lines are just for reference, you can directly download the &lt;a href=&#34;https://github.com/ankitsinghaniyaz/react-rails-mobx-boilerplate&#34;&gt;react-rails-mobx-boilerplate&lt;/a&gt; from my GitHub repo and get started.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# adding the gem, add the below line to your gem file
gem &#39;react_on_rails&#39;, &#39;~&amp;gt;6&#39;

# Git commit all your changes and then
bundle

# you may need to do git commit again
# below lines will create a sample welcome controller
rails generate react_on_rails:install

# install
bundle &amp;amp;&amp;amp; npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are few things to know about &lt;code&gt;react_on_rails&lt;/code&gt; gem, which can be confusing for starters like me.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# You expose your react module so that it can be available outside
import ReactOnRails from &#39;react-on-rails&#39;;

# register you component
ReactOnRails.register({ Counter });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# you should also keep in mind that when creating new .jsx files
# you should add its path to webpack.config.js entry hash as
const config = {
  entry: [
    &#39;es5-shim/es5-shim&#39;,
    &#39;es5-shim/es5-sham&#39;,
    &#39;babel-polyfill&#39;,
    &#39;./app/welcome/Counter&#39;, // like this
  ],
  .........
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Make sure your Node js version is greater than 5, react_on_rails gem has this requirement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;add-mobx-and-mobx-react&#34;&gt;Add Mobx and Mobx React&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# After previous step you will have a client folder
# inside that folder edit the package.json and add the below lines to the dependencies list

&amp;quot;mobx-react&amp;quot;: &amp;quot;^3.5.6&amp;quot;,
&amp;quot;mobx&amp;quot;: &amp;quot;^2.5.1&amp;quot;

# If you will want to use decorators with mobx then make your .babelrc file look something like this

{
  &amp;quot;presets&amp;quot;: [&amp;quot;es2015&amp;quot;, &amp;quot;stage-0&amp;quot;, &amp;quot;react&amp;quot;],
  &amp;quot;plugins&amp;quot;: [&amp;quot;transform-decorators-legacy&amp;quot;]
}

# I was also required to install
npm install babel-plugin-transform-decorators-legacy --save-dev

# finally do npm install to install newly added dependencies
npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bring-it-up&#34;&gt;Bring it Up&lt;/h2&gt;

&lt;p&gt;Now you are all set to bring your system up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# create all the database if you are using postgresql as database, else skip, you will need to run this step if you use the boilerplate code
rails db:create # use rake db:create in rails 4 or below

# start the server and webpack client for transpilation
foreman start -f Procfile.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope you were successfully able to get your system up and running. If I missed something or you have some doubts, do let me know in the comments below. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Things Beginners Find Confusing About React.js</title>
      <link>http://classandobjects.com/tutorial/confusing_things_in_react/</link>
      <pubDate>Fri, 09 Sep 2016 20:12:23 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/confusing_things_in_react/</guid>
      <description>

&lt;p&gt;React js is currently the most hyped front-end framework(view) today. I am lucky that at my current workplace I am getting a chance to explore react and rails. I am a Python lover, but I am completely open to learning new technologies. I have seen confusing things in Ruby on Rails which is very opposite to React and Javascript environment. I am trying to list out things every react js beginner should know. I have pointed out top 5 reasons why React js can be confusing. So let us get started.&lt;/p&gt;

&lt;h2 id=&#34;1-react-is-just-the-view-layer&#34;&gt;1. React is just the view layer&lt;/h2&gt;

&lt;p&gt;You will not understand what does this mean, I didn&amp;rsquo;t, and it is ok. If you already do not have some understanding of what modern MVC front-end frameworks are then this definition is almost useless. In a simple way, view layer will simply mean a replacement for your HTML, CSS and Javascript(umm.. maybe). These three things make up the view of any web application. So React js provides us with a way to write things in a reusable and powerful way. You still have to do all the things like AJAX, data handling, function naming convention, etc in you own fashion. This gives you a lot of flexibility but at a reduced speed of development.&lt;/p&gt;

&lt;h2 id=&#34;2-jsx-is-not-html-or-xml&#34;&gt;2. JSX is not HTML or XML&lt;/h2&gt;

&lt;p&gt;React is aimed at being developer friendly and I second it. It uses an XML-like syntax called JSX. It will look like normal HTML, but has few catches. &lt;code&gt;class&lt;/code&gt; is a reserved keyword so you have to use &lt;code&gt;className&lt;/code&gt;, this means you cannot use your HTML code directly, you will have to do a bunch of replacements.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;## Normal HTML
&amp;lt;div class=&amp;quot;row&amp;quot; ... &amp;gt;
## Syntax for React
&amp;lt;div className=&amp;quot;row&amp;quot; ...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are other catches you need to remember, you cannot use independent HTML tags like &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, it is required that you close them like &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Always beware of these gaps as you tend to overlook them, even the error messaging cannot help you much.&lt;/p&gt;

&lt;h2 id=&#34;3-what-should-be-a-component&#34;&gt;3.  What should be a Component?&lt;/h2&gt;

&lt;p&gt;There is an opinion on what you should make into a component. There are people who believe that any piece of code that is supposed to be used again should be made into a component while other want to do so when you are dealing with states. This is not a big issue, but you will have to adjust yourself according to the developer culture you find yourself in.&lt;/p&gt;

&lt;h2 id=&#34;4-multiple-syntax-options&#34;&gt;4. Multiple syntax options&lt;/h2&gt;

&lt;p&gt;Javascript is evolving very fast with the advent of these new front-end frameworks. The current syntax is called as ES6 or ES2015, which is a bit different than the older version. This can be very confusing if you do not know this. In your quest to find something you may find resources which can be following the older syntax or the newer one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;## Older Syntax
var aComponent = React.createClass({
  function: render() { ... }
});

## Newer ES6 Syntax
class ComponentB extends React.Component {
  render() { ... }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find the use of the both the syntax in React official documentation. They both work fine but try avoiding mixing them up  and stick to the newer ES6 style.&lt;/p&gt;

&lt;h2 id=&#34;5-how-to-use-it-with-your-existing-application&#34;&gt;5. How to use it with your existing application&lt;/h2&gt;

&lt;p&gt;React is an independent layer which you will want to include in your already existing full stack solution. They could be a bit daunting. To me using webpack and browsify are a task in themselves. In Rails, we have &lt;code&gt;react-rails&lt;/code&gt; gem which make the task very easy. Undoubtedly there are similar efforts in other community as well. You will find many ways to integrate react, try using the easier one and upgrade as your need increases.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As my conclusion, I will say that React js seem like it will stay in the market for a long time. Even if it does not, it is very easy to learn and does not require a lot of concepts. It is fast and keeps your code DRY. You should try React if you have not tried it yet. It is fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Level Up the Programming Skills : Language vs Logic</title>
      <link>http://classandobjects.com/blogs/level_up_programming_skills/</link>
      <pubDate>Fri, 09 Sep 2016 19:17:43 +0530</pubDate>
      
      <guid>http://classandobjects.com/blogs/level_up_programming_skills/</guid>
      <description>&lt;p&gt;Learning the language of computers can be both interesting and daunting. You may be either starting your career or are a seasoned developer, the chances are too likely that you are having trouble hitting the right balance between language and logical skills.  In this article, I will try to find out what is the right balance to keep levelling up our programming skills.&lt;/p&gt;

&lt;p&gt;In the current education system, most of the times, we tend to focus too much on the logical aspect of the programming. Understanding logic and different algorithms are albeit the most important part of programming. I believe that when you know why you are learning and what all can be done with your tools then you do it better and faster. Take an example of a man learning to be a carpenter. He is taught how to use the saw, hammer, nails, but he does not yet know how the hammer, nails and saw are related. The example may be poor but I hope you get the point. There is another extreme which mostly happen to the people from the non-computer background. They know how to code Java, Python and Ruby, but what they do not know is what are the tools that we have and how to use them efficiently. They do not understand things like time and space complexity or maybe they do, but after a long time. You can also find yourself in this situation if you are in the industry for a long while, where most of the work is easy. You get to learn new ways of doing things, new syntax and new technology, but you are not flexing your logical muscles much.&lt;/p&gt;

&lt;p&gt;Here is a quick suggestion on what I feel is the right approach to the right balance. When you have plenty of time and you are in a learning phase, focus on building logic. You can build logical abilities by solving different algorithmic problems on different coding platforms. You should also try out classical problems like trees, sorting techniques, pattern printing and recursion. Now when you are comfortable with one language and know the logic, it is time to dive deep into learning language intricacies. Try getting your hands on some framework and build something real. The most obvious way would be to go with  web development or mobile development. You should also build some projects and start learning the language part(framework) when you are nearing to apply for a job. You need some solid projects to back you up in the interview. This is going to give you the matter to talk on and your logical skills are going to get you through the tricky programming questions most interviewers ask.&lt;/p&gt;

&lt;p&gt;In the end, I would just say that build your logical skills first and keep an eye on what are you going to do with these skills. As you get into the career you will not have much time to work on the logical part but you should keep taking some occasional coding challenges to keep yourself revitalized. Thanks for reading, looking forward to a difference in opinion!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>To Life: Work from home</title>
      <link>http://classandobjects.com/blogs/why_freelance/</link>
      <pubDate>Thu, 08 Sep 2016 23:11:40 +0530</pubDate>
      
      <guid>http://classandobjects.com/blogs/why_freelance/</guid>
      <description>&lt;p&gt;I may be young, but age is just a number. I have seen life and work. I have been lost and I have been saved. I have travelled from the complete chaos of not knowing where to go and then to the bliss of understanding how everything fits together. I have hopped from language to language and now I understand them all(almost).&lt;/p&gt;

&lt;p&gt;I love to code in Python, given how clean, readable and maintainable it looks. In my professional work I use Ruby on Rails as my mode of transport and React js as my way to interact. I have always wondered how can one land a freelance job and then work less and enjoy more. I am a firm believer that workplace can never be as comfortable as home, the smell of my table, my fire(I&amp;rsquo;ll get one) and everything else. They just save you a lot of energy. You do not have to travel, time saved. You can use your resources and of course, earn better. I am also a budding traveller, I want to explore places and learn more, and of course, this includes technology. Freelancing empowers me in both the ways, financially and physically.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.toptal.com/web&#34;&gt;Toptal&lt;/a&gt; is an awesome platform, indeed the best one for freelancing. If given, I would love to explore amazing people, exciting job and gorgeous lifestyle.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Step by Step Guide on Deploying Django Application on Heroku</title>
      <link>http://classandobjects.com/tutorial/host_django_app_on_heroku/</link>
      <pubDate>Fri, 27 May 2016 11:03:20 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/host_django_app_on_heroku/</guid>
      <description>

&lt;p&gt;This guide describe how to deploy Django application on Heroku, gracefully! Yes, you heard it right. Heroku was mostly build with Ruby in mind but now it supports Python applications too. There are some points which are not mentioned in other blogs and &lt;a href=&#34;https://devcenter.heroku.com/articles/django-app-configuration&#34;&gt;Heroku official docs&lt;/a&gt;. I will try to describe all the process in detail here, so that you have a good experience deploying you apps. Lets get started!&lt;/p&gt;

&lt;h2 id=&#34;creating-the-project&#34;&gt;Creating the Project&lt;/h2&gt;

&lt;p&gt;Creating your project is the most important step in this series. Create your application with default Django settings. These are the few configuration that you will have to do. You can create a Django project using following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;django-admin startproject myproject
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tutorial talks about configuring Django apps created through above method!&lt;/p&gt;

&lt;p&gt;If you are creating a new application I highly recommend using Heroku Django template. You can start your project as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;django-admin startproject --template=https://github.com/heroku/heroku-django-template/archive/master.zip --name=Procfile  myproject
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If you created application using this template you can skip the configuration step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;creating-virtual-environment&#34;&gt;Creating Virtual Environment&lt;/h2&gt;

&lt;p&gt;There are lot of packages in your default python path. You may want to create a fresh and sandboxed environment for this application. This avoids your global changes from affecting this application. Install &lt;code&gt;virtualenv&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can create the virtual environment with following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# creates virtualenv with name myenv, feel free to change it
virtualenv myenv

# activate the environment
source myenv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-dependencies&#34;&gt;Installing Dependencies&lt;/h2&gt;

&lt;p&gt;These are few dependencies which are required to successfully deploy your application. Make sure you install them all.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install django
pip install gunicorn
pip install dj-database-url
pip install whitenoise
pip install psycopg2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can get &lt;a href=&#34;http://stackoverflow.com/questions/5420789/how-to-install-psycopg2-with-pip-on-python&#34;&gt;error while installing psycopg2&lt;/a&gt;. I found solution to that on stackoverflow:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libpq-dev python-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try again installing &lt;code&gt;psycopg2&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;You also want to install &lt;a href=&#34;https://devcenter.heroku.com/articles/getting-started-with-python#set-up&#34;&gt;Heroku Toolbelt&lt;/a&gt; and &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;git&lt;/a&gt; for your platform. This helps us easily manage our application remotely.&lt;/p&gt;

&lt;p&gt;Try following commands on console to make sure you installed them properly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;heroku --help
git --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If these commands return with some options, you have successfully installed them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Did You Know?&lt;/strong&gt; Heroku uses git to create local repository&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;creating-requirements-txt&#34;&gt;Creating requirements.txt&lt;/h2&gt;

&lt;p&gt;There is no way for Heroku to know your application dependencies. So we need a &lt;code&gt;requirements.txt&lt;/code&gt; file in our root at the same level as &lt;code&gt;manage.py&lt;/code&gt; file.
We can generate the file with following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Make sure you create the file parallel to manage.py file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;creating-procfile&#34;&gt;Creating Procfile&lt;/h2&gt;

&lt;p&gt;Create a file called as &lt;code&gt;Procfile&lt;/code&gt; at same level as your &lt;code&gt;manage.py&lt;/code&gt; file. Put the following line into it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;web: gunicorn myproject.wsgi
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Procfile starts with a capital &lt;code&gt;P&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: Make sure to change myproject.wsgi to yourprojectname.wsgi&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This file is used by Heroku to determine what kind of service will be running on the server. It says that &amp;ldquo;We want a web server gunicorn with the project mentioned&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;creating-runtime-txt&#34;&gt;Creating runtime.txt&lt;/h2&gt;

&lt;p&gt;Herkou uses &lt;code&gt;Python2&lt;/code&gt; as default. If you are like me and want to use &lt;code&gt;Python3&lt;/code&gt; instead. You can create a file &lt;code&gt;runtime.txt&lt;/code&gt; in your project root at the same level as &lt;code&gt;manage.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can find out your python version by firing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -V
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then put the line in your &lt;code&gt;runtime.txt&lt;/code&gt; file as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python-3.5.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuring-to-deploy&#34;&gt;Configuring to Deploy&lt;/h2&gt;

&lt;p&gt;Now you are all set to Configure your Django app for Herkou. There are two files that you need to edit.&lt;/p&gt;

&lt;h3 id=&#34;modify-settings-py&#34;&gt;Modify settings.py&lt;/h3&gt;

&lt;p&gt;Open &lt;code&gt;settings.py&lt;/code&gt; file, it can be found under your &lt;code&gt;myproject/myproject/setting.py&lt;/code&gt;. There is only one &lt;code&gt;settings.py&lt;/code&gt; file in your project. Edit it and the following lines following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# add this import at top
import dj_database_url

# scroll down to find entries related to DATABASE, below that put following lines
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES[&#39;default&#39;].update(db_from_env)

# scroll down to find entries realted to STATIC, add these lines there
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

STATIC_ROOT = os.path.join(PROJECT_ROOT, &#39;staticfiles&#39;)
STATIC_URL = &#39;/static/&#39;

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, &#39;static&#39;),
)
STATICFILES_STORAGE = &#39;whitenoise.django.GzipManifestStaticFilesStorage&#39;

# make sure to remove duplicates line if they exist
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;modify-wsgi-py&#34;&gt;Modify wsgi.py&lt;/h3&gt;

&lt;p&gt;Find &lt;code&gt;wsgi.py&lt;/code&gt; file parallel to &lt;code&gt;settings.py&lt;/code&gt; file. Edit it and add following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Add these imports at top
from django.core.wsgi import get_wsgi_application
from whitenoise.django import DjangoWhiteNoise

application = get_wsgi_application()
application = DjangoWhiteNoise(application)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-gitignore&#34;&gt;Create .gitignore&lt;/h2&gt;

&lt;p&gt;Create a git ignore file to avoid adding of unwanted files to our repository. Create a file called &lt;code&gt;.gitignore&lt;/code&gt; on your project root. Add following lines to it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# name of your environment
venv
# do not allow python cache file
*.pyc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively you can delete the virtual environment &lt;code&gt;venv&lt;/code&gt; you created!&lt;/p&gt;

&lt;h2 id=&#34;deploy-on-heroku&#34;&gt;Deploy on Heroku&lt;/h2&gt;

&lt;p&gt;Now you are done with configuring Django application. We are now going to host our application to Heroku. We will use the &lt;strong&gt;herkou toolbelt and git&lt;/strong&gt; we installed previously.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://www.heroku.com/&#34;&gt;heroku&lt;/a&gt; and sign up for an account. Do not forget to verify the email address. Fire in following commands while inside your project root.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;heroku login
# Enter your login id and password you used to create the account

# Set up git flow
git init
git add .

# may have to provide email and name
git config user.email &amp;quot;email@domain.com&amp;quot;
git config user.name &amp;quot;yourname&amp;quot;

git commit -m &#39;Initial commit&#39;

heroku create
# Creates a new application for this project

git push heroku master
# creates a local repository heroku and starts to host it on heroku

# if above step throws an error you may have to disable static collection and push again using above command
heroku config:set DISABLE_COLLECTSTATIC=1

heroku open
# opens you app on browser

heroku logs
# use this to see how your app is working in case you find some error
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I have tried to give all the steps I took to deploy apps to heroku. If you find this article usefull share it with your friends. Feel free to comment about any improvement you would like to see.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We Learn, We Grow..&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Interactive visualization in R using Rcharts</title>
      <link>http://classandobjects.com/tutorial/interactive_visualization_using_rcharts_in_r/</link>
      <pubDate>Tue, 24 May 2016 21:48:05 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/interactive_visualization_using_rcharts_in_r/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Visualization is daydreaming with a purpose ~ Bo Bennett&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;R is good at one thing, analysis. Until now it was sufficient on its own, with its library base, but now the need have changed. We want interactive visualization and JavaScript is ahead in the race. Thanks to this man, &lt;a href=&#34;https://github.com/ramnathv&#34;&gt;Ramnath Vaidya&lt;/a&gt;, who created a wonderful library called &lt;a href=&#34;http://rcharts.io/&#34;&gt;rCharts&lt;/a&gt; that brings JavaScript&amp;rsquo;s graphics into R. As you are reading this you must be familiar with plot and ggplot in R.
So let’s explore rCharts without delay.&lt;/p&gt;

&lt;p&gt;rCharts supports multiple JavaScript charting libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://timelyportfolio.github.io/docs/_build/html/intro/create.html#nvd3&#34;&gt;NVD3&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most Interactive&lt;/li&gt;
&lt;li&gt;Multiple layers do not work&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://timelyportfolio.github.io/docs/_build/html/intro/create.html#highcharts&#34;&gt;Highcharts (Free for non-comercial use)&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Better than below&lt;/li&gt;
&lt;li&gt;Supports multiple layers/series&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://timelyportfolio.github.io/docs/_build/html/dimple/index.html&#34;&gt;Dimple&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://timelyportfolio.github.io/docs/_build/html/intro/create.html#polycharts&#34;&gt;Polycharts (Free for non-comercial use)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://timelyportfolio.github.io/docs/_build/html/intro/create.html#morris&#34;&gt;Morris&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://timelyportfolio.github.io/docs/_build/html/intro/create.html#rickshaw&#34;&gt;Rickshaw&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://timelyportfolio.github.io/docs/_build/html/intro/create.html#xcharts&#34;&gt;xCharts&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can click on any of them to go to their respective examples. They all have their pros and cons. I would suggest you to use NVD3 if you are interested in a graph that has just one type of element eg: Scatter Plot, Line, Bar, etc. If you are interested in more features then you can checkout &lt;a href=&#34;http://classandobjects.com/underconstruction/&#34;&gt;creating a scatter plot with regression line&lt;/a&gt; and &lt;a href=&#34;http://classandobjects.com/underconstruction/&#34;&gt;bar with average line&lt;/a&gt;. These are the only library which currently support layering.&lt;/p&gt;

&lt;p&gt;Below I&amp;rsquo;ll give code and output for using Highcharts and NVD3. Dimple was just updated as I am writing this blog, I&amp;rsquo;ll try to write a separate blog on that.&lt;/p&gt;

&lt;h2 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h2&gt;

&lt;p&gt;Install rCharts. This requires devtools to be installed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;require(devtools)
install_github(&#39;rCharts&#39;, &#39;ramnathv&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;nvd3&#34;&gt;NVD3&lt;/h3&gt;

&lt;p&gt;We will our &lt;code&gt;mtcars&lt;/code&gt; data set in all below examples to keep it simple. Visit &lt;a href=&#34;http://timelyportfolio.github.io/docs/_build/html/nvd3/create.html&#34;&gt;NVD3 documentation&lt;/a&gt; for more example, have a look below and you will understand how they work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;rCharts&amp;quot;)
#NVD3 is nPlot()

a &amp;lt;- nPlot(
	mpg ~ wt,                             # y vs x
	data = mtcars,			      # data set
	group = &amp;quot;cyl&amp;quot;,			      # group by
	type = &amp;quot;scatterChart&amp;quot;)                # type of chart
					      # eg:multiBarChart, lineChart, pieChart

   a$xAxis(axisLabel = &amp;quot;Weight&amp;quot;)
   a$yAxis(axisLabel = &amp;quot;MPG&amp;quot;)

   a$chart(color = c(
   		&#39;brown&#39;,
   		&#39;black&#39;,
	      &#39;#FFAFA&#39;))		       # override default colors

a			               # prints the graph
a$save(&amp;quot;E:\\temp.html&amp;quot;)	               # save it as html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:
&lt;img src=&#34;http://classandobjects.com/images/analytics/nvd_graph.png&#34; alt=&#34;nvd3 charts graphics in r&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rcharts.io/viewer/?ec3e1d782fa46be590cb#.Vr1HyPkdD_x&#34;&gt;See Interactive Ouput on Github Here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;highcharts&#34;&gt;Highcharts&lt;/h3&gt;

&lt;p&gt;The example below creates a scatter plot with &lt;code&gt;mtcars&lt;/code&gt;. I have tried to use almost all the functions and parameters. If I have missed some, please point it out in the comments below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;rCharts&amp;quot;)
#Highcharts is hPlot()

a &amp;lt;- hPlot(
	x = &amp;quot;wt&amp;quot;,				#x axis value
	y = &amp;quot;mpg&amp;quot;,				#y axis value
	data = mtcars,			        #dataset
	type = &amp;quot;scatter&amp;quot;,		        #type: line, bubble,..
	group = &amp;quot;cyl&amp;quot;,		                #group by
	#size = &amp;quot;cyl&amp;quot;,			        #can adjust size of bubble etc
	radius = 5)				#size of points

a$title(&amp;quot;This is a Title&amp;quot;)
a$subtitle(&amp;quot;This is a subtitle&amp;quot;)
a$credits(text = &amp;quot;Created with rCharts&amp;quot;, href = &amp;quot;rCharts&amp;quot;)

a$legend(					#use this to modify legend
  title = list(
     text = &amp;quot;Number&amp;quot;),		                #adds a title to legend
     align = &#39;right&#39;, 			        #default is at bottom
     verticalAlign = &#39;middle&#39;,
     layout = &#39;vertical&#39;)

a$plotOptions(				        #Display all groups as circle
  scatter = list(marker = list(symbol = &#39;circle&#39;)))

a$colors(					#add custom colors
  &#39;rgba(223, 83, 83, .75)&#39;,
  &#39;rgba(60, 179, 113, .75)&#39;,
  &#39;rgba(238, 130, 238, .75)&#39;
)

a					         #prints the graph
a$save(&amp;quot;E:\\temp.html&amp;quot;)		                 #saves to html
#More complex graphs in next blog!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:
&lt;img src=&#34;http://classandobjects.com/images/analytics/highchart.png&#34; alt=&#34;high charts graphics in r&#34; /&gt;
&lt;a href=&#34;http://rcharts.github.io/viewer/?ecd2a7f0b7abd611ed9a&#34;&gt;See Interactive Ouput on Github Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you liked the blog and the examples proved useful. They have been taken from many different websites and StackExchange. Thank you everyone for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding Domain to Github Pages</title>
      <link>http://classandobjects.com/tutorial/adding_custom_domain_to_github_pages/</link>
      <pubDate>Sun, 22 May 2016 16:48:45 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/adding_custom_domain_to_github_pages/</guid>
      <description>

&lt;p&gt;A domain which shows what you do can add &lt;em&gt;credibility&lt;/em&gt; to your blog. In this tutorial we are going to add custom domain to our github page. You may also want to &lt;a href=&#34;..&#34;&gt;host a website on github&lt;/a&gt;. You can have domain with &lt;a href=&#34;https://www.godaddy.com&#34;&gt;godaddy&lt;/a&gt;, &lt;a href=&#34;https://www.hostgator.com&#34;&gt;hostgator&lt;/a&gt;, &lt;a href=&#34;https://www.namecheap.com&#34;&gt;namecheap&lt;/a&gt;, etc. The steps remains the same. I will point out any peculiarity, if they exist. So, lets get started.&lt;/p&gt;

&lt;h2 id=&#34;configuring-github&#34;&gt;Configuring Github&lt;/h2&gt;

&lt;p&gt;There should be a way for github to know what is the name of your domain. To keep it simple you have to create a file &lt;code&gt;CNAME&lt;/code&gt; in your repository root. This will be the place where you have hosted your websites html content. In this file put in your domain name &lt;code&gt;mydomain.com&lt;/code&gt;. You can &lt;a href=&#34;https://github.com/ankitsinghaniyaz/ankitsinghaniyaz.github.io&#34;&gt;visit my github hosting&lt;/a&gt; and checkout how my &lt;code&gt;CNAME&lt;/code&gt; file looks.&lt;/p&gt;

&lt;h2 id=&#34;configuring-domain-provider&#34;&gt;Configuring Domain Provider&lt;/h2&gt;

&lt;p&gt;In this step we have to login to our account where we have bought the domain.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning: This may seem complicated, but it is not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://classandobjects.com/images/domain_entry.png&#34; alt=&#34;adding entries in domain&#34; title=&#34;TEXT&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You have to follow these three simple steps. Just add/modify these entries:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create/modify &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;Aname&lt;/code&gt; or &lt;code&gt;Alias&lt;/code&gt; with name as &lt;code&gt;@&lt;/code&gt;  and value as &lt;code&gt;192.30.252.153&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create/modify &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;Aname&lt;/code&gt; or &lt;code&gt;Alias&lt;/code&gt; with name as &lt;code&gt;@&lt;/code&gt;  and value as &lt;code&gt;192.30.252.154&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create/modify &lt;code&gt;CNAME&lt;/code&gt; with name as &lt;code&gt;www&lt;/code&gt; and value as &lt;code&gt;yourgithubid.github.io&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;Aname&lt;/code&gt; and &lt;code&gt;Alias&lt;/code&gt; are same thing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Keep all other fields to their defaults. Do not hesitate to play. It is how you learn new things.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Within less than 10 minutes you website will come live. You can go to your link and try it! If you find any information missing or have any doubts feel free to leave a comment below. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Easily Host a Static website on Github</title>
      <link>http://classandobjects.com/tutorial/host_static_site_on_github/</link>
      <pubDate>Sat, 21 May 2016 15:36:40 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/host_static_site_on_github/</guid>
      <description>

&lt;p&gt;This post shows, how you can easily host your static website on Github. We are using Hugo static site generator. You can use anything similar.&lt;/p&gt;

&lt;h2 id=&#34;initial-setup&#34;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;I believe that you already have &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;setup your hugo project&lt;/a&gt;, refer the link in case you want to start a project. Then open your &lt;code&gt;config.toml&lt;/code&gt; file and modify the &lt;strong&gt;baseUrl&lt;/strong&gt; as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;baseurl = &amp;quot;http://{username}.github.io/&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;replace {username} with your username.&lt;/p&gt;

&lt;h2 id=&#34;repository-for-project-files&#34;&gt;Repository for Project Files&lt;/h2&gt;

&lt;p&gt;This step is not mandatory, but still you want to do this. Creating a repository for you content will help you monitor how your site advanced. It will also help you correct changes in case you do something wrong(which is bound to happen).&lt;/p&gt;

&lt;p&gt;Create a new repository on Github with same name as your project. Then &lt;code&gt;cd&lt;/code&gt; inside the directory and issue following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
git add -A
git commit -m &amp;quot;init : setup project&amp;quot;
git remote add origin &amp;lt;project name&amp;gt;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These commands will also be displayed to you when you create the repository on Github.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note : Make sure you are inside the project directory, before issuing the commands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;repository-for-web-pages&#34;&gt;Repository for Web Pages&lt;/h2&gt;

&lt;p&gt;We will now create another repository to hold our static website. Create a new repository on GitHub with name as &lt;code&gt;{username}.github.io&lt;/code&gt;. Replace the {username} with you Github username.&lt;/p&gt;

&lt;p&gt;After this create a new directory parallel to your project directory. Name it as you find appropriate. I name it same as the project directory with some extra suffix. This helps in keeping them close. like
&lt;code&gt;github&lt;/code&gt; and &lt;code&gt;github_pages&lt;/code&gt;. Move into this new directory and do as following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
git add -A
git commit -m &amp;quot;init : setup project&amp;quot;
git remote add origin {username}.github.io
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generate-static-site&#34;&gt;Generate Static Site&lt;/h2&gt;

&lt;p&gt;We are all set-up. We will create our website which will be visible to everyone.
Move into your project directory and run following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -d ../github_pages [-t theme_name]
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note : Change directory name to match yours.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; flag tells where should hugo dumb the site&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; flag is optional, you can specify a theme name you are using.&lt;/p&gt;

&lt;p&gt;So, Now we have our website ready. All we need to do is host them and make it available to everyone.&lt;/p&gt;

&lt;h2 id=&#34;bring-it-live&#34;&gt;Bring It Live&lt;/h2&gt;

&lt;p&gt;To get our site live we have to move into our &lt;code&gt;github_pages&lt;/code&gt; directory and push it up to Github.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add -A
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now view you website at &lt;strong&gt;www.yourusername.github.io&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;automate-it&#34;&gt;Automate It&lt;/h2&gt;

&lt;p&gt;We do not want to repeat commands every time we make some changes. So in my &lt;code&gt;github&lt;/code&gt; project directory I create a new file called &lt;code&gt;deploy.sh&lt;/code&gt; and add following lines to it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Build the project.
hugo -d ../classandobjectspage

# Change directory
cd ../classandobjectspage

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can just run &lt;code&gt;bash deploy.sh &amp;quot;your message&amp;quot;&lt;/code&gt;. This will do all the above tasks we did manually.&lt;/p&gt;

&lt;h2 id=&#34;custom-domain&#34;&gt;Custom Domain&lt;/h2&gt;

&lt;p&gt;Adding a domain to your website is optional. You can read &lt;a href=&#34;http://classandobjects.com/hugo/adding_custom_domain_to_github_pages/&#34;&gt;how to add domain to my github page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;finally&#34;&gt;Finally&lt;/h2&gt;

&lt;p&gt;I tried to show every step I took in hosting my website. My experience was not good with the available documentation, but I hope that this will help you all. If you find anything missing or not mentioned, do let me know in the comments below! Thanks for reading&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Hugo is best for blogging? You should use it too!</title>
      <link>http://classandobjects.com/blogs/why_hugo/</link>
      <pubDate>Wed, 18 May 2016 19:45:15 +0530</pubDate>
      
      <guid>http://classandobjects.com/blogs/why_hugo/</guid>
      <description>

&lt;p&gt;Just like any blogger, I also wanted to start my own blog. I had many doubts. What is my niche? Will people read my blog? Which platform to use for blogging? I do not know if I have found my answers, but for the last one it is &lt;strong&gt;HUGO&lt;/strong&gt;. Yes, I searched for different blogging platforms and all had their own set of drawbacks. Here are few reasons for not selecting them :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Blogger : Free, SEO optimized, but no good themes&lt;/li&gt;
&lt;li&gt;Wordpress : Good themes, SEO Optimized, but costly&lt;/li&gt;
&lt;li&gt;Quora : Good theme, Free, but not SEO optimized&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I would have used Wordpress, but I discovered &lt;strong&gt;HUGO&lt;/strong&gt;, which is times faster and way cheaper than Wordpress. Here I am on Hugo and doing amazing stuffs. Here are the reasons why I love Hugo:&lt;/p&gt;

&lt;h2 id=&#34;fast-very-fast&#34;&gt;Fast, very fast&lt;/h2&gt;

&lt;p&gt;I did my research and found out that hugo is faster than Wordpress and many other products(static site generators) like Jekyll and Octopress2. You can see this &lt;a href=&#34;https://youtu.be/CdiDYZ51a2o&#34;&gt;video&lt;/a&gt; on hugo official website and get the estimate. For detailed comparison, this &lt;a href=&#34;http://conscientiousprogrammer.com/blog/2015/05/31/why-i-switched-from-octopress-2-to-hugo/&#34;&gt;blog&lt;/a&gt; is also an awesome resource.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In simple words, Hugo creates and stores your HTML file just once. This reduces the delay of creating HTML content every time. These files do not require much resource(CPU, Memory, etc), thus it can be hosted cheap.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;themes-beautiful-themes&#34;&gt;Themes, beautiful themes&lt;/h2&gt;

&lt;p&gt;I am crazy about the look and feel of anything. Say me nuts, but I will not use anything that does not look good. It may have lot of functionalities, but the feel is equally important to me. Hugo has a good set of themes you can choose from and customize, if needed. You can also create your own theme. This is also a theme called as &lt;a href=&#34;http://themes.gohugo.io/crisp/&#34;&gt;Hugo Crips&lt;/a&gt;. I liked it for its simplicity. You can explore more hugo themes at &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;themes.gohugo.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ease-of-setup&#34;&gt;Ease of Setup&lt;/h2&gt;

&lt;!-- point about setup blog on ubuntu --&gt;

&lt;p&gt;Setting up hugo is also really easy. They have setup files for most of the Operating system. You can find them &lt;a href=&#34;https://github.com/spf13/hugo/releases/tag/v0.15&#34;&gt;here&lt;/a&gt;.
You can just click and install it just like any other operating system. For ubuntu users they can download &lt;code&gt;hugo_0.15_amd64.deb&lt;/code&gt; or &lt;code&gt;*.deb&lt;/code&gt; files depending on their platform. Then installing is just a matter of clicks.&lt;/p&gt;

&lt;h2 id=&#34;host-for-free&#34;&gt;Host for free&lt;/h2&gt;

&lt;!-- point about hosting github detailed blog --&gt;

&lt;p&gt;It is almost free to host them. They can be hosted for free on &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;github&lt;/a&gt; or &lt;a href=&#34;https://gohugo.io/tutorials/hosting-on-bitbucket/&#34;&gt;bitbucket&lt;/a&gt; with links to their respective official tutorial. You can also see &lt;a href=&#34;http://classandobjects.com/hugo/host_static_site_on_github&#34;&gt;how to host a static website easily on github&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A domain will cost you just $5 per year.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;warning&#34;&gt;Warning&lt;/h2&gt;

&lt;p&gt;Hugo has lots of features built-in, like &lt;code&gt;syntax highlighting&lt;/code&gt;, table of contents, pagination, etc. It has almost all the things you need for content development. If you want something more, you may have to wait or tinker around. Optimistically, you may create something which is missing and help the whole hugo community.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Do you see &lt;strong&gt;Hugo is fast, beautiful, easy and free&lt;/strong&gt;. If you can take initial trouble of setting it up and getting is started, which is minimal, you are going to reap its benefits. Tough, you should remember hugo has just started its journey. So, awaken the hacker in you and get started&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About - Ankit Singhnaiya</title>
      <link>http://classandobjects.com/about/</link>
      <pubDate>Tue, 05 Oct 1993 14:02:37 +0200</pubDate>
      
      <guid>http://classandobjects.com/about/</guid>
      <description>

&lt;p&gt;I need to learn and experiment. It feels dumb and
boring without some tech to play with. My tools of choice are Java, Python, Jade,
SASS. I love to kill dragons using Django, Flask, Git. Analytics is also
something, I am looking forward to.&lt;/p&gt;

&lt;p&gt;I have build several web based and mobile applications. You can find them all on
my github link. My blogs are like a micro copy of the things in my brain. I
write blogs to better my thoughts and, help others build something easy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let me know if you want a tutorial on something, may be I am getting bored!&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;about-blog-content&#34;&gt;About Blog Content&lt;/h3&gt;

&lt;p&gt;All the posts that you will see here have been build, using awesome free and
open source stuff available out there. I am a learner first, I hunt down master
blogs and aggregate content and better them. Content here will be a in-depth
coverage of things you do not find easy. I will try to keep the content crips and
clear. I thank you for your precious time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Page Under Construction</title>
      <link>http://classandobjects.com/underconstruction/</link>
      <pubDate>Tue, 24 May 2016 23:24:35 +0530</pubDate>
      
      <guid>http://classandobjects.com/underconstruction/</guid>
      <description>

&lt;h3 id=&#34;coming-soon-stay-tuned&#34;&gt;Coming soon.. Stay Tuned..&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>