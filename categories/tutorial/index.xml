<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Class &amp; Objects</title>
    <link>http://classandobjects.com/categories/tutorial/</link>
    <description>Recent content in Tutorial on Class &amp; Objects</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Sep 2016 22:35:37 +0530</lastBuildDate>
    <atom:link href="http://classandobjects.com/categories/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Add Subscribe Button to Your Website, also Add a Scroll Triggered Subscribe Box</title>
      <link>http://classandobjects.com/tutorial/add_subscribe_button_on_static_site/</link>
      <pubDate>Fri, 16 Sep 2016 22:35:37 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/add_subscribe_button_on_static_site/</guid>
      <description>

&lt;p&gt;Subscribe button is a useful feature to have on any website. It helps you create loyal audience base and helps your users get amazing content from the blogs they love. It can be quite easy to integrate one on a WordPress site or a website with a backend. In this article, I will show you how to add a subscribe button to any static website using &lt;a href=&#34;www.formspree.io&#34;&gt;formspree.io&lt;/a&gt;, &lt;a href=&#34;https://github.com/hubspot/vex&#34;&gt;Vex js&lt;/a&gt; and javascript. I will also show how you can add a subscribe box(popup) when a user has scrolled the page. I am using Hugo as my static site generator, the process is exactly the same for any static site. So let&amp;rsquo;s get started.&lt;/p&gt;

&lt;h2 id=&#34;setup-vex-js&#34;&gt;Setup Vex js&lt;/h2&gt;

&lt;p&gt;I did my little research and found out Vex js is the best dialogue(popup) creator library. It is &lt;strong&gt;light, good looking and has zero dependencies&lt;/strong&gt;, and that is all we need. First, you will need to &lt;a href=&#34;http://github.hubspot.com/vex/api/themes/&#34;&gt;select a theme&lt;/a&gt;, visit the link to see examples of all the themes which you can use. Select the one you like and download it from here. Also download &lt;code&gt;vex-theme-bottom-right-corner&lt;/code&gt;, if you want to do a subscribe popup after scrolling your page. You will need to &lt;a href=&#34;https://github.com/HubSpot/vex/tree/master/dist/js&#34;&gt;download vex.combined.min.js&lt;/a&gt; from this link. Make sure you have one theme CSS file and one Vex combined js file. Now you will want to store this file to your static directory, where you have your Javascript and CSS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Skip to the next step if you are not using HUGO.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In case of Hugo, I will put it under the themes as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/themes
  /theme-name
    /js
      vex.combined.min.js
    /css
      vex-theme-name.css
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;add-a-subscribe-button&#34;&gt;Add a subscribe button&lt;/h2&gt;

&lt;p&gt;Now, after having set up Vex, we want a form to be shown to the user when  they click the Subscribe button.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;!-- for normal HTML --&amp;gt;
&amp;lt;!-- include css and js like this --&amp;gt;
&amp;lt;script src=&amp;quot;path/to/myscripts.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;path/to/mystyle.css&amp;quot;&amp;gt;
&amp;lt;!-- most of the times they are included in the `footer` partial in Hugo. --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Add this button in your html file --&amp;gt;
&amp;lt;button onclick=&amp;quot;subscribe()&amp;quot;&amp;gt;Subscribe&amp;lt;/button&amp;gt;

&amp;lt;script&amp;gt;
function hide (elements) {
  elements = elements.length ? elements : [elements];
  for (var index = 0; index &amp;lt; elements.length; index++) {
    elements[index].style.display = &#39;none&#39;;
  }
}

function subscribe() {
    // replace vex-theme-plain with the name of your theme
    vex.defaultOptions.className = &#39;vex-theme-plain&#39;;
    var vexId = vex.dialog.open({
    message: &#39;Get latest updates, enter your email:&#39;,
    input: [
        &#39;&amp;lt;input name=&amp;quot;email&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;jhondoe@domain.com&amp;quot; required /&amp;gt;&#39;,
    ].join(&#39;&#39;),
    buttons: [
        $.extend({}, vex.dialog.buttons.YES, { text: &#39;Subscribe&#39; }),
        $.extend({}, vex.dialog.buttons.NO, { text: &#39;Back&#39; })
    ],
    callback: function (data) {
        if (!data) {
                }
                else {
            var email_value = data.email;
                        var form = document.createElement(&amp;quot;form&amp;quot;);
                        form.setAttribute(&#39;method&#39;,&amp;quot;post&amp;quot;);
                        //replace below email with your email
                        form.setAttribute(&#39;action&#39;, &amp;quot;http://formspree.io/classandobjects@gmail.com&amp;quot;);

                        var input = document.createElement(&amp;quot;input&amp;quot;); //input element, text
                        input.setAttribute(&#39;type&#39;,&amp;quot;email&amp;quot;);
                        input.setAttribute(&#39;name&#39;,&amp;quot;email&amp;quot;);
                        input.value = email_value;

                        form.appendChild(input);
                        form.submit();
        }
                // In most cases you wont need the below line, but after clicking submit or cancel if the box does not closes for some reason, you will want to uncommnet the line below.
                // hide(document.querySelectorAll(&#39;.vex&#39;));
    },
    });
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example just replace classandobects@gmail.com with you own email address and the theme name with your selected Vex theme. This should be enough to get you started. Formspree.io allow you to get 1000 emails for free and is fairly easy to use. Until now you have implemented a subscribe option like the one you get when you click the &lt;code&gt;envelope&lt;/code&gt; icon on your left.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TIP: You will have to verify the first email you get via formspree.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;bonus-adding-a-subscribe-form-on-scroll&#34;&gt;Bonus, Adding a subscribe form on scroll&lt;/h2&gt;

&lt;p&gt;Try scrolling below on this site and as you reach around &lt;strong&gt;70%&lt;/strong&gt;, you get a popup to subscribe. You should continue this step if you want to implement something similar to this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: &lt;code&gt;jQuery&lt;/code&gt; is a requirement for this step. There are high chances that you are already using jQuery.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  function createSidePopup() {
    if (document.querySelectorAll(&#39;.vex&#39;).length == 0) {
        vex.defaultOptions.className = &#39;vex-theme-bottom-right-corner&#39;;
        var vexId = vex.dialog.open({
        message: &#39;Why not subscribe for more! Email Please&#39;,
        input: [
            &#39;&amp;lt;input name=&amp;quot;email&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;jhondoe@domain.com&amp;quot; required /&amp;gt;&#39;,
        ].join(&#39;&#39;),
        buttons: [
            $.extend({}, vex.dialog.buttons.YES, { text: &#39;Subscribe&#39; }),
            $.extend({}, vex.dialog.buttons.NO, { text: &#39;Back&#39; })
        ],
        callback: function (data) {
            if (!data) {
                    }
                    else {
                var email_value = data.email;
                            var form = document.createElement(&amp;quot;form&amp;quot;);
                            form.setAttribute(&#39;method&#39;,&amp;quot;post&amp;quot;);
                            form.setAttribute(&#39;action&#39;, &amp;quot;http://formspree.io/classandobjects@gmail.com&amp;quot;);

                            var input = document.createElement(&amp;quot;input&amp;quot;);
                            input.setAttribute(&#39;type&#39;,&amp;quot;email&amp;quot;);
                            input.setAttribute(&#39;name&#39;,&amp;quot;email&amp;quot;);
                            input.value = email_value;

                            form.appendChild(input);
                            form.submit();
            }
                    hide(document.querySelectorAll(&#39;.vex&#39;));
        },
        });
    }
}

function onScrollSubscribePopup () {
    {{ if .IsPage }}
    $(document).ready(function() {
        $(window).scroll(function(e){
            var scrollTop = $(window).scrollTop();
            var docHeight = $(document).height();
            var winHeight = $(window).height();
            var scrollPercent = (scrollTop) / (docHeight - winHeight);
            var scrollPercentRounded = Math.round(scrollPercent*100);
            if (scrollPercentRounded &amp;gt; 70 &amp;amp;&amp;amp; scrollPercentRounded &amp;lt;     80) {
                createSidePopup();
            }
        });
    });
    {{ end }}
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code to calculate the scroll percentage has been taken from this &lt;a href=&#34;https://codepen.io/achudars/pen/Cpast&#34;&gt;codepen&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I believe this post was helpful for creating a subscribe button. If you find any issue with the above code or need any help do let me know in the comments below. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to use React and MobX with Rails 5</title>
      <link>http://classandobjects.com/tutorial/using_react_mobx_with_rails/</link>
      <pubDate>Thu, 15 Sep 2016 01:02:27 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/using_react_mobx_with_rails/</guid>
      <description>

&lt;p&gt;MobX is the new state management library which packs really well with react. Mobx makes things much simpler to &lt;code&gt;redux&lt;/code&gt;, which is more famous in react community. I have detailed out the step on how to get started with using mobx and rails 5.&lt;/p&gt;

&lt;h2 id=&#34;install-react-on-rails-gem-https-github-com-shakacode-react-on-rails-blob-master-docs-tutorial-md&#34;&gt;Install &lt;a href=&#34;https://github.com/shakacode/react_on_rails/blob/master/docs/tutorial.md&#34;&gt;react_on_rails gem&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;To make mobx functional with rails, I had to drop &lt;code&gt;react-rails&lt;/code&gt; gem and adopt the &lt;code&gt;react_on_rails&lt;/code&gt; gem. Setting it up is cumbersome in the beginning but it pays off well in the long run. React on rails site have a detailed guide on how to setup react_on_rails gem, I&amp;rsquo;ll just quickly brush them up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The below lines are just for reference, you can directly download the &lt;a href=&#34;https://github.com/ankitsinghaniyaz/react-rails-mobx-boilerplate&#34;&gt;react-rails-mobx-boilerplate&lt;/a&gt; from my GitHub repo and get started.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# adding the gem, add the below line to your gem file
gem &#39;react_on_rails&#39;, &#39;~&amp;gt;6&#39;

# Git commit all your changes and then
bundle

# you may need to do git commit again
# below lines will create a sample welcome controller
rails generate react_on_rails:install

# install
bundle &amp;amp;&amp;amp; npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are few things to know about &lt;code&gt;react_on_rails&lt;/code&gt; gem, which can be confusing for starters like me.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# You expose your react module so that it can be available outside
import ReactOnRails from &#39;react-on-rails&#39;;

# register you component
ReactOnRails.register({ Counter });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# you should also keep in mind that when creating new .jsx files
# you should add its path to webpack.config.js entry hash as
const config = {
  entry: [
    &#39;es5-shim/es5-shim&#39;,
    &#39;es5-shim/es5-sham&#39;,
    &#39;babel-polyfill&#39;,
    &#39;./app/welcome/Counter&#39;, // like this
  ],
  .........
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Make sure your Node js version is greater than 5, react_on_rails gem has this requirement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;add-mobx-and-mobx-react&#34;&gt;Add Mobx and Mobx React&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# After previous step you will have a client folder
# inside that folder edit the package.json and add the below lines to the dependencies list

&amp;quot;mobx-react&amp;quot;: &amp;quot;^3.5.6&amp;quot;,
&amp;quot;mobx&amp;quot;: &amp;quot;^2.5.1&amp;quot;

# If you will want to use decorators with mobx then make your .babelrc file look something like this

{
  &amp;quot;presets&amp;quot;: [&amp;quot;es2015&amp;quot;, &amp;quot;stage-0&amp;quot;, &amp;quot;react&amp;quot;],
  &amp;quot;plugins&amp;quot;: [&amp;quot;transform-decorators-legacy&amp;quot;]
}

# I was also required to install
npm install babel-plugin-transform-decorators-legacy --save-dev

# finally do npm install to install newly added dependencies
npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bring-it-up&#34;&gt;Bring it Up&lt;/h2&gt;

&lt;p&gt;Now you are all set to bring your system up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# create all the database if you are using postgresql as database, else skip, you will need to run this step if you use the boilerplate code
rails db:create # use rake db:create in rails 4 or below

# start the server and webpack client for transpilation
foreman start -f Procfile.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope you were successfully able to get your system up and running. If I missed something or you have some doubts, do let me know in the comments below. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Easily Host a Static website on Github</title>
      <link>http://classandobjects.com/tutorial/host_static_site_on_github/</link>
      <pubDate>Sat, 21 May 2016 15:36:40 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/host_static_site_on_github/</guid>
      <description>

&lt;p&gt;This post shows, how you can easily host your static website on Github. We are using Hugo static site generator. You can use anything similar.&lt;/p&gt;

&lt;h2 id=&#34;initial-setup&#34;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;I believe that you already have &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;setup your hugo project&lt;/a&gt;, refer the link in case you want to start a project. Then open your &lt;code&gt;config.toml&lt;/code&gt; file and modify the &lt;strong&gt;baseUrl&lt;/strong&gt; as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;baseurl = &amp;quot;http://{username}.github.io/&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;replace {username} with your username.&lt;/p&gt;

&lt;h2 id=&#34;repository-for-project-files&#34;&gt;Repository for Project Files&lt;/h2&gt;

&lt;p&gt;This step is not mandatory, but still you want to do this. Creating a repository for you content will help you monitor how your site advanced. It will also help you correct changes in case you do something wrong(which is bound to happen).&lt;/p&gt;

&lt;p&gt;Create a new repository on Github with same name as your project. Then &lt;code&gt;cd&lt;/code&gt; inside the directory and issue following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
git add -A
git commit -m &amp;quot;init : setup project&amp;quot;
git remote add origin &amp;lt;project name&amp;gt;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These commands will also be displayed to you when you create the repository on Github.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note : Make sure you are inside the project directory, before issuing the commands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;repository-for-web-pages&#34;&gt;Repository for Web Pages&lt;/h2&gt;

&lt;p&gt;We will now create another repository to hold our static website. Create a new repository on GitHub with name as &lt;code&gt;{username}.github.io&lt;/code&gt;. Replace the {username} with you Github username.&lt;/p&gt;

&lt;p&gt;After this create a new directory parallel to your project directory. Name it as you find appropriate. I name it same as the project directory with some extra suffix. This helps in keeping them close. like
&lt;code&gt;github&lt;/code&gt; and &lt;code&gt;github_pages&lt;/code&gt;. Move into this new directory and do as following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
git add -A
git commit -m &amp;quot;init : setup project&amp;quot;
git remote add origin {username}.github.io
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generate-static-site&#34;&gt;Generate Static Site&lt;/h2&gt;

&lt;p&gt;We are all set-up. We will create our website which will be visible to everyone.
Move into your project directory and run following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -d ../github_pages [-t theme_name]
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note : Change directory name to match yours.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; flag tells where should hugo dumb the site&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; flag is optional, you can specify a theme name you are using.&lt;/p&gt;

&lt;p&gt;So, Now we have our website ready. All we need to do is host them and make it available to everyone.&lt;/p&gt;

&lt;h2 id=&#34;bring-it-live&#34;&gt;Bring It Live&lt;/h2&gt;

&lt;p&gt;To get our site live we have to move into our &lt;code&gt;github_pages&lt;/code&gt; directory and push it up to Github.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add -A
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now view you website at &lt;strong&gt;www.yourusername.github.io&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;automate-it&#34;&gt;Automate It&lt;/h2&gt;

&lt;p&gt;We do not want to repeat commands every time we make some changes. So in my &lt;code&gt;github&lt;/code&gt; project directory I create a new file called &lt;code&gt;deploy.sh&lt;/code&gt; and add following lines to it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Build the project.
hugo -d ../classandobjectspage

# Change directory
cd ../classandobjectspage

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can just run &lt;code&gt;bash deploy.sh &amp;quot;your message&amp;quot;&lt;/code&gt;. This will do all the above tasks we did manually.&lt;/p&gt;

&lt;h2 id=&#34;custom-domain&#34;&gt;Custom Domain&lt;/h2&gt;

&lt;p&gt;Adding a domain to your website is optional. You can read &lt;a href=&#34;http://classandobjects.com/hugo/adding_custom_domain_to_github_pages/&#34;&gt;how to add domain to my github page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;finally&#34;&gt;Finally&lt;/h2&gt;

&lt;p&gt;I tried to show every step I took in hosting my website. My experience was not good with the available documentation, but I hope that this will help you all. If you find anything missing or not mentioned, do let me know in the comments below! Thanks for reading&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>