<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Class &amp; Objects</title>
    <link>http://classandobjects.com/categories/javascript/</link>
    <description>Recent content in Javascript on Class &amp; Objects</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Mar 2017 19:02:43 +0530</lastBuildDate>
    <atom:link href="http://classandobjects.com/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Webpack and Yarn with Rails 5</title>
      <link>http://classandobjects.com/tutorial/use_webpack_and_yarn_with_rails/</link>
      <pubDate>Fri, 10 Mar 2017 19:02:43 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/use_webpack_and_yarn_with_rails/</guid>
      <description>

&lt;p&gt;Rails is awesome, agreed? Everyone understood that JavaScript is coming huge and there has to be a community-specific way to integrate React, Angular or &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue&lt;/a&gt; with a rails project.&lt;/p&gt;

&lt;p&gt;There have been partial successful attempts like like &lt;a href=&#34;https://github.com/reactjs/react-rails&#34;&gt;react-rails gem&lt;/a&gt;, &lt;a href=&#34;https://github.com/shakacode/react_on_rails&#34;&gt;react-on-rails&lt;/a&gt;, webpack-rails, etc to help user bring JS in. Still, they all lacked somewhere. So here comes all new &lt;a href=&#34;weblog.rubyonrails.org/2017/2/23/Rails-5-1-beta1/&#34;&gt;Rails 5.1&lt;/a&gt; with &lt;strong&gt;webpack&lt;/strong&gt; and &lt;strong&gt;yarn&lt;/strong&gt; integrated.&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t need to wait for 5.1 to release or try its beta version, all these is is now available via the gem &lt;a href=&#34;https://github.com/rails/webpacker&#34;&gt;webpacker&lt;/a&gt;. In this post I&amp;rsquo;ll cover how we can pull in this gem and start our JavaScript love story in the Rails land gracefully.&lt;/p&gt;

&lt;p&gt;I am doing a post on how to integrate Vue and Rails, so this is a follow up for how to get the app up and running.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-the-webpacker-gem:b2e57e59eb273f2270b8bcec9b7fd15f&#34;&gt;Setting up the Webpacker gem&lt;/h2&gt;

&lt;p&gt;Add the following line to your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;webpacker&#39;, github: &#39;rails/webpacker&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then run the following commands from your bash:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# to install the new gem
bundle
# to configure webpack
bin/rails webpacker:install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate an &lt;code&gt;app/javascript&lt;/code&gt; directory for you. All of the files can now use &lt;code&gt;ES6&lt;/code&gt; syntax. These files will be compiled and available in your &lt;code&gt;/public&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2 id=&#34;what-next:b2e57e59eb273f2270b8bcec9b7fd15f&#34;&gt;What next?&lt;/h2&gt;

&lt;p&gt;You can now create a file in this javascript directory and then we can refer them from any file like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-erb&#34;&gt;&amp;lt;%# like in app/views/layout/application.html.erb %&amp;gt;
&amp;lt;%= javascript_pack_tag &#39;calendar&#39; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;javascript_pack_tag&lt;/code&gt; is helper provided to bring in this files. This will basically import the compiled version of &lt;code&gt;app/javascript/calendar.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So now we have written our first file and we want to use that, so we will want to have our webpack transpile these file for us. We can do so by running the command below in a separate terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/webpack-watcher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will keep watching for all the changes we make to our file and bundle them.&lt;/p&gt;

&lt;h2 id=&#34;installing-packages:b2e57e59eb273f2270b8bcec9b7fd15f&#34;&gt;Installing packages&lt;/h2&gt;

&lt;p&gt;You should also see a &lt;code&gt;package.json&lt;/code&gt; file created in your root which allows you to bring in any npm or bower packages. Let&amp;rsquo;s say we want to install &lt;a href=&#34;https://lodash.com/&#34;&gt;lodash&lt;/a&gt;, we can simply do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add lodash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and now you have this npm asset available along with your rails assets pipeline, pretty cool huh?&lt;/p&gt;

&lt;p&gt;This is very powerful if you don&amp;rsquo;t know. Previously rails developer need to be dependent on some wrapper gem, which will most probably not updated very frequently. So this saves us all those headache.&lt;/p&gt;

&lt;h2 id=&#34;bonus:b2e57e59eb273f2270b8bcec9b7fd15f&#34;&gt;bonus!&lt;/h2&gt;

&lt;p&gt;The webpacker gem tries to help you start your project with ease and thus come with preconfigured with react, vue and angular. You can start using anyone of them with the respective command below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails webpacker:install:react
rails webpacker:install:angular
rails webpacker:install:vue
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:b2e57e59eb273f2270b8bcec9b7fd15f&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are still few things like getting all of these to work while keeping &lt;code&gt;turbolinks&lt;/code&gt; and how to structure the code. All these things are yet to get more concrete. In the meanwhile, whatever we have now is pretty powerful and helps achive a lot. I hope you find this post helpful. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The zen of form validation (React)</title>
      <link>http://classandobjects.com/right_form_validation_in_react/</link>
      <pubDate>Thu, 16 Feb 2017 00:13:56 +0530</pubDate>
      
      <guid>http://classandobjects.com/right_form_validation_in_react/</guid>
      <description>

&lt;p&gt;Form validation is complex! With react, it gets even more complicated. In the traditional web, there are inputs and we specify the type, max, min, etc which are validated when the user submits the form. In a slightly more UX focused app you will use &lt;code&gt;jQuery&lt;/code&gt; and it&amp;rsquo;s plugin to give the feedback as user types and interacts with the system. You can see all types of validations happening throughout the web and here are my conclusion after doing some research. I will also share how I plan to solve this excruciating pain in React.&lt;/p&gt;

&lt;p&gt;These are few distilled rules that I come to rely upon which can be followed. They may look very simple but difficult to get right. Here they are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Validate field only when they are touched&lt;/li&gt;
&lt;li&gt;If a field is changing there should be some delay before you validate.&lt;/li&gt;
&lt;li&gt;When submit is attempted then validate all&lt;/li&gt;
&lt;li&gt;Show error above/beside the input, also highlight the input in question.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we are to follow these few rules then we can easily nail down validation. I will quickly and briefly describe them.&lt;/p&gt;

&lt;h3 id=&#34;validate-only-when-a-field-is-touched:a00e322c32e19c56f62ae51e6ffd572f&#34;&gt;Validate only when a field is touched&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s say you have few fields and all are empty by default. Do you like to see all the fields marked as red before you even do anything? NO! So we should only validate fields which user has touched once. By touch I mean not just clicked in the input, it means he/she actually tries to change the value even once. Then we can keep doing validation continuously.&lt;/p&gt;

&lt;h3 id=&#34;delay-before-you-validate:a00e322c32e19c56f62ae51e6ffd572f&#34;&gt;Delay before you validate&lt;/h3&gt;

&lt;p&gt;I bet you have seen this, click on a field called as &lt;code&gt;email&lt;/code&gt;, type the first character and you see an error, this is not a valid email. You just started and you know it&amp;rsquo;s not complete yet. Give some time before you show error in these cases.&lt;/p&gt;

&lt;h3 id=&#34;validate-all-fields-on-submit:a00e322c32e19c56f62ae51e6ffd572f&#34;&gt;Validate all fields on submit&lt;/h3&gt;

&lt;p&gt;Validation on submit is the only way you can validate required fields. It is only when the end user tries to submit the form you will know that he left out the required field(s). Other times we can safely assume that he is still filling in the form.&lt;/p&gt;

&lt;h3 id=&#34;show-error-message-above-beside-and-highlight-the-input-in-question:a00e322c32e19c56f62ae51e6ffd572f&#34;&gt;Show error message above/beside and highlight the input in question&lt;/h3&gt;

&lt;p&gt;This is the goal why we are reading this post. The user doesn&amp;rsquo;t fill in something or fills in the wrong information. We want to avoid that. So we need to show &lt;code&gt;meaningful&lt;/code&gt; and &lt;code&gt;well-located&lt;/code&gt; error messages. According to my reading, people say showing the error on top of the input in question is ideal, but I&amp;rsquo;m not sure on this one. All I am saying is error should be shown as close to the input as possible. Also highlighting the input is a plus to get users attention.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:a00e322c32e19c56f62ae51e6ffd572f&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If you follow these steps you are bound to nail form validation and UX for your application. I am also trying to solve the same problem with React, as you may know, that form validation in React is a pain. In the next article, I&amp;rsquo;ll talk about how can we follow these rules and do the right things in react. I hope you liked the article, thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to configure Jasmine test with React, ES6 and Webpack</title>
      <link>http://classandobjects.com/test_using_jasmine_react_es6_webpack/</link>
      <pubDate>Sat, 11 Feb 2017 15:22:23 +0530</pubDate>
      
      <guid>http://classandobjects.com/test_using_jasmine_react_es6_webpack/</guid>
      <description>

&lt;p&gt;If you created your app using &lt;code&gt;react_create_app&lt;/code&gt;, congrats! You saved you saved yourself some time. You now have &lt;code&gt;jest&lt;/code&gt; up and running correctly. But chances are you configured your &lt;code&gt;Webpack&lt;/code&gt; and now you want to configure &lt;code&gt;Jasmine&lt;/code&gt; to test your components and do unit testing. Let&amp;rsquo;s see how can we do that:&lt;/p&gt;

&lt;h3 id=&#34;installing-jasmine:a7b602c2db563f0f7ed935347ae2f6b7&#34;&gt;Installing Jasmine&lt;/h3&gt;

&lt;p&gt;To run your test cases and access jasmine from the command line you will want to install jasmine globally.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g jasmine
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;initialize-jasmine:a7b602c2db563f0f7ed935347ae2f6b7&#34;&gt;Initialize jasmine&lt;/h3&gt;

&lt;p&gt;Jasmine needs some configuration to know where your tests are and what needs to be done with them. Run the below command to initialize the repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jasmine init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will create a &lt;code&gt;jasmine.json&lt;/code&gt; file, which will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  // dirctory under which files exists
  &amp;quot;spec_dir&amp;quot;: &amp;quot;app/javascript&amp;quot;,
  // naming convention of the file, i.e. file ending in spec.js
  &amp;quot;spec_files&amp;quot;: [
    &amp;quot;**/*[sS]pec.js&amp;quot;
  ],
  // helper files are run before specs
  &amp;quot;helpers&amp;quot;: [
    &amp;quot;spec_helpers/**/*.js&amp;quot;
  ],
  &amp;quot;stopSpecOnExpectationFailure&amp;quot;: false,
  &amp;quot;random&amp;quot;: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S. Please remove all comments if you copy the above json&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;make-jasmine-understand-es6:a7b602c2db563f0f7ed935347ae2f6b7&#34;&gt;Make jasmine understand ES6&lt;/h3&gt;

&lt;p&gt;Jasmine cannot understand ES6 syntax by default. So we will have to use &lt;code&gt;babel&lt;/code&gt;. Install babel like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install babel-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create a file called as &lt;code&gt;run.js&lt;/code&gt; you can place it anywhere, I like to keep it in &lt;code&gt;spec/&lt;/code&gt;, which should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import Jasmine from &#39;jasmine&#39;;

let jasmine = new Jasmine();
// modify this line to point to your jasmine.json
jasmine.loadConfigFile(&#39;app/javascript/spec/support/jasmine.json&#39;);
jasmine.execute();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-the-test:a7b602c2db563f0f7ed935347ae2f6b7&#34;&gt;Run the test&lt;/h3&gt;

&lt;p&gt;Finally to run the test, add the following line inside &lt;code&gt;scripts&lt;/code&gt; section of your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;test&amp;quot;: &amp;quot;babel-node app/javascript/spec/run.js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Ensure you point to your &lt;code&gt;run.js&lt;/code&gt; file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;now &lt;code&gt;npm test&lt;/code&gt; will run all your test cases in the spec path specified in jasmine.json file.&lt;/p&gt;

&lt;h3 id=&#34;bonus-handling-webpack-alias:a7b602c2db563f0f7ed935347ae2f6b7&#34;&gt;Bonus: handling webpack alias&lt;/h3&gt;

&lt;p&gt;You should be all good to go, but in case you had some &lt;code&gt;aliases&lt;/code&gt; in your webpack config then you will need to follow this step. Install &lt;code&gt;module-alias&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --save module-alias
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then add following line of code in your &lt;code&gt;package.json&lt;/code&gt; at the end:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;_moduleAliases&amp;quot;: {
  &amp;quot;vendor&amp;quot; : &amp;quot;vendor/&amp;quot;,
  &amp;quot;js&amp;quot;: &amp;quot;app/javascript/&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;feel free to change the aliases above, in my case, I had two aliases called as vendor and js. Now in order to get this aliases load before your test start, you will have to create a file in &lt;code&gt;helper/&lt;/code&gt;, I will called it &lt;code&gt;alias_fix.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In that file all you have to do is paste these lines of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import &#39;module-alias/register&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run your tests as usual and everything should work.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:a7b602c2db563f0f7ed935347ae2f6b7&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I hope this was helpful. If you find something which can be improved please let me know in the comments below. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Problem With React Single Page App</title>
      <link>http://classandobjects.com/tutorial/problems_with_react_single_page_app/</link>
      <pubDate>Sat, 26 Nov 2016 01:35:47 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/problems_with_react_single_page_app/</guid>
      <description>

&lt;p&gt;If you are planning to create a single page app maybe you have heard people recommending React as an option. React is amazing and I am currently using React in almost all the projects. As you may have also heard that React is just the view layer so that means you will have to make choices. The choice about the state management, styling, routing,  app structure, naming conventions and much more. These choices could be fun and intimidating at the same time. I am writing this article to outline my challenges and discovery trying to create single page app using React Js.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://classandobjects.com/images/tutorial/react.png&#34; alt=&#34;react js single page app&#34; title=&#34;single page app issues with react&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-beginning:193c4d247a68848b168cc40000a1dd29&#34;&gt;The Beginning&lt;/h2&gt;

&lt;p&gt;When I started the project I was sure that my project will be on React. I asked myself how do you start a new React project? The first crossroad was about using ES2015. I knew this was coming to all the browsers still I had to make a choice. Recently facebook has introduced a CLI for React called as React-Create-App, which will do the most recommended setup for you. I assume that you are using this CLI tool to scaffold your project. If you indeed used it, congratulations. You saved yourself the pain of setting these things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EsLint (Helps you follow some rules and ease error identification)&lt;/li&gt;
&lt;li&gt;Babel (Polyfill for ES6 and JSX syntax)&lt;/li&gt;
&lt;li&gt;Webpack (Handle bundling and running babel)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://facebook.github.io/jest/&#34;&gt;Jest&lt;/a&gt; (Testing)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I still  think I haven&amp;rsquo;t mentioned all the things that scaffolding did for you. If instead, you tread on the manual path, you will have to educate yourself about setting up webpack and babel. Differentiate testing frameworks like enzyme and jest. This knowledge is not bad, but it comes in the way of what you actually want to achieve. So this was just setting up the view layer. Let&amp;rsquo;s move on.&lt;/p&gt;

&lt;h2 id=&#34;state-mangement:193c4d247a68848b168cc40000a1dd29&#34;&gt;State Mangement&lt;/h2&gt;

&lt;p&gt;The state is the cool thing in react, which is monitored by React and whenever a state changes the view is updated automagically. Now I asked myself how will I want to manage my states? I was presented with few answers. The idealist in me said Redux, the minimalist said React States, the optimist said &lt;a href=&#34;https://mobxjs.github.io/mobx/&#34;&gt;MobX&lt;/a&gt;. What do you choose???&lt;/p&gt;

&lt;p&gt;If your app is simple you can just get away with React states and never know other libraries ever existed, but if it has some complex state management you may want to consider the others. Redux is the most famous, widely used and mature. If you are building something critical then Redux can give you powerful debugging and testing abilities. If you just want to avoid boilerplate code associated with Redux and want to get the React Magic in state management also, then MobX may be the right things.&lt;/p&gt;

&lt;p&gt;After some blogs, few video lessons and a few sample projects. I decided to go with MobX, so that I have power when I need and I can avoid boilerplate as much as I can. With this checkpoint passed, you are 75% done with the setup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S. I am Rubyist, so boilerplate? NOOO!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;routing:193c4d247a68848b168cc40000a1dd29&#34;&gt;Routing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ReactTraining/react-router&#34;&gt;React-Routers&lt;/a&gt; is the defacto way of routing with React. It also has a simple API and easy to learn. Though there are concepts like Hash History and Browser History. In short, HashHistory is ugly and not to be used in production but easier to setup. The opposite is true for BrowserHistory. In order to use this good looking, preferred BrowserHistory you have to configure the server to return the root page for anything requested. This again feels like a lot of work to me as it should have been easily available out of the box.&lt;/p&gt;

&lt;h2 id=&#34;css-inline-vs-class:193c4d247a68848b168cc40000a1dd29&#34;&gt;CSS Inline vs Class&lt;/h2&gt;

&lt;p&gt;I am pretty sure that your app will have some form of styling. So again you will have to spend time digging through discussion and forums deciding what kind of styling you prefer. This may not be a big deal but it takes time and impact the way you structure your project.&lt;/p&gt;

&lt;h2 id=&#34;application-structure-file-name-conventions:193c4d247a68848b168cc40000a1dd29&#34;&gt;Application Structure, File Name Conventions&lt;/h2&gt;

&lt;p&gt;Again not a difficult part but I like to follow some well-defined conventions so that I do not have to overload my brain with deciding where to place my files and how will I want to name them. Like my &lt;code&gt;&amp;lt;Toolbar /&amp;gt;&lt;/code&gt; should live in &lt;code&gt;toolbar.jsx&lt;/code&gt; , &lt;code&gt;toolbarComponent.js&lt;/code&gt;, &lt;code&gt;Toolbar.componet.js&lt;/code&gt;, &amp;hellip;.&lt;/p&gt;

&lt;p&gt;I think you get the problem. All these options are logically sound and our mind seems to adapt and learn more patterns as we advance in the project. Some time later I may feel bad about the names I chose a few months back.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:193c4d247a68848b168cc40000a1dd29&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Please see these are the things which I find challenging and believe someone will feel the same. If you are fine with all these work I respect your views and choices. I am completely for the React and I love it, but surely this issues warrant my attention to other notable frameworks like &lt;a href=&#34;http://emberjs.com/&#34;&gt;ember.js&lt;/a&gt;. I will like to try out Ember and see how it fits my style of development. I will soon be doing a post on my choices and how I tackled all these problems in the React ecosystem. Then I will redo the same things with Ember and try to note my experience with the same.&lt;/p&gt;

&lt;p&gt;If this post helped you in any way, I would love your appreciation below. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moment.js Cheatsheet</title>
      <link>http://classandobjects.com/tutorial/moment-js-cheatsheet/</link>
      <pubDate>Tue, 15 Nov 2016 21:31:53 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/moment-js-cheatsheet/</guid>
      <description>

&lt;p&gt;Handling date and time in JavaScript could be a pain. I am a ruby enthusiast and one thing which I deeply love about it, is its date and time helper. They are easy to use and very intuitive. In JavaScript world, &lt;a href=&#34;www.momentjs.com&#34;&gt;moment.js&lt;/a&gt; comes for the rescue. It has a lot of functionality but I somehow find its syntax a bit daunting. This post aims to provide a list of few most used methods. It shall also serve as a cheatsheet and reminder to everyone. So let&amp;rsquo;s get started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://classandobjects.com/images/tutorial/momentjs.png&#34; alt=&#34;moment js cheatsheet&#34; title=&#34;Moment js cheatsheet&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-moment:33256c48849067d2e4396387431d6dd8&#34;&gt;The Moment&lt;/h2&gt;

&lt;p&gt;I will speak less and let the code do the talking.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// returns the current time, same as new Date()
moment()

// get moment object from string, though we should not use them as they are ambiguous.
moment(&amp;quot;10-10-1993&amp;quot;)
moment(&amp;quot;01/12/2015&amp;quot;)

// instead use, it makes sure that your dates are interpreted correctly.
moment(&amp;quot;10-10-1993&amp;quot;, &amp;quot;DD-MM-YYYY&amp;quot;)
moment(&amp;quot;01/12/2015&amp;quot;, &amp;quot;DD/MM/YYYY&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a list of few most used parsing tokens:
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Token &lt;/th&gt;
    &lt;th&gt;Description &lt;/th&gt;
    &lt;th&gt;Example &lt;/th&gt;
  &lt;/tr&gt;&lt;/p&gt;

&lt;p&gt;&lt;tr&gt;
    &lt;td&gt;YYYY&lt;/td&gt;
    &lt;td&gt;4 Digit Year&lt;/td&gt;
    &lt;td&gt;2016&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;YY&lt;/td&gt;
    &lt;td&gt;2 Digit Year&lt;/td&gt;
    &lt;td&gt;16&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;MMMM&lt;/td&gt;
    &lt;td&gt;Full Month Name&lt;/td&gt;
    &lt;td&gt;January&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;MMM&lt;/td&gt;
    &lt;td&gt;3 Character Month Name&lt;/td&gt;
    &lt;td&gt;Jan&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;MM&lt;/td&gt;
    &lt;td&gt;2 Digit Month&lt;/td&gt;
    &lt;td&gt;02&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;M&lt;/td&gt;
    &lt;td&gt;1 or 2 Digit Month&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;DD&lt;/td&gt;
    &lt;td&gt;2 Digit Date&lt;/td&gt;
    &lt;td&gt;09&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;D&lt;/td&gt;
    &lt;td&gt;1 or 2 Digit Date&lt;/td&gt;
    &lt;td&gt;9&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;M&lt;/td&gt;
    &lt;td&gt;1 or 2 Digit Month&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;HH or H&lt;/td&gt;
    &lt;td&gt;1 or 2 Digit Hour 24hrs&lt;/td&gt;
    &lt;td&gt;23&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;hh or h&lt;/td&gt;
    &lt;td&gt;1 or 2 Digit Hour 12hrs&lt;/td&gt;
    &lt;td&gt;01&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;a or A&lt;/td&gt;
    &lt;td&gt;Am/Pm&lt;/td&gt;
    &lt;td&gt;PM&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;m or mm&lt;/td&gt;
    &lt;td&gt;Minutes&lt;/td&gt;
    &lt;td&gt;59&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;s or ss&lt;/td&gt;
    &lt;td&gt;Seconds&lt;/td&gt;
    &lt;td&gt;23&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: lower case tokens are used for time and upper case tokens are used for date.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;breaking-the-moment:33256c48849067d2e4396387431d6dd8&#34;&gt;Breaking The Moment&lt;/h2&gt;

&lt;p&gt;We find ourself most of the time accessing different pieces of information stored in the moment object. It can be &lt;code&gt;date, hour, seconds, etc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// create the moment object
var now = moment();

// to get todays date
now.date()
now.hour()
now.minute()
now.second()

// we also have get method on moment
now.get(&#39;day&#39;) // returns day of the week
now.get(&#39;millisecond&#39;)

// get unix time
now.unix()

// I have specified the list of all possible vales you can use in get, add and subtract method in the below section.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;play-the-moment:33256c48849067d2e4396387431d6dd8&#34;&gt;Play the Moment&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var now = moment()

// clone moment
var current = moment(now)
// change to utc
now.utc()
// validate the time object
now.isValid()

// add value to a time
// prototype: moment().add(value, scale)
now.add(3, &#39;hours&#39;);
now.subtract(7, &#39;days&#39;)

// jumping to some time
now.startOf(&#39;day&#39;)
now.endOf(&#39;month&#39;)

// possible fields to use
var possibleScales = [year, month, quarter, week, isoWeek, day, date, hour, minute, second]

// use any available token to format time as you need
now.format(&#39;hh:mm a&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;moment.js methods like add and subtract mutates the object itself. This can cause an unseen bug if you are not aware!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;conclusion:33256c48849067d2e4396387431d6dd8&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Moment.js is very helpful to solve date and time related problems in javascript. It was created to be easy and powerful. With the right exposure we can get our work done easily with &lt;code&gt;momentjs&lt;/code&gt;. If you liked the post, please let us know how can we improve. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>