<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React Js on Class &amp; Objects</title>
    <link>http://classandobjects.com/tags/react-js/</link>
    <description>Recent content in React Js on Class &amp; Objects</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Sep 2016 01:02:27 +0530</lastBuildDate>
    <atom:link href="http://classandobjects.com/tags/react-js/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to use React and MobX with Rails 5</title>
      <link>http://classandobjects.com/tutorial/using_react_mobx_with_rails/</link>
      <pubDate>Thu, 15 Sep 2016 01:02:27 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/using_react_mobx_with_rails/</guid>
      <description>

&lt;p&gt;MobX is the new state management library which packs really well with react. Mobx makes things much simpler to &lt;code&gt;redux&lt;/code&gt;, which is more famous in react community. I have detailed out the step on how to get started with using mobx and rails 5.&lt;/p&gt;

&lt;h2 id=&#34;install-react-on-rails-gem-https-github-com-shakacode-react-on-rails-blob-master-docs-tutorial-md&#34;&gt;Install &lt;a href=&#34;https://github.com/shakacode/react_on_rails/blob/master/docs/tutorial.md&#34;&gt;react_on_rails gem&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;To make mobx functional with rails, I had to drop &lt;code&gt;react-rails&lt;/code&gt; gem and adopt the &lt;code&gt;react_on_rails&lt;/code&gt; gem. Setting it up is cumbersome in the beginning but it pays off well in the long run. React on rails site have a detailed guide on how to setup react_on_rails gem, I&amp;rsquo;ll just quickly brush them up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The below lines are just for reference, you can directly download the &lt;a href=&#34;https://github.com/ankitsinghaniyaz/react-rails-mobx-boilerplate&#34;&gt;react-rails-mobx-boilerplate&lt;/a&gt; from my GitHub repo and get started.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# adding the gem, add the below line to your gem file
gem &#39;react_on_rails&#39;, &#39;~&amp;gt;6&#39;

# Git commit all your changes and then
bundle

# you may need to do git commit again
# below lines will create a sample welcome controller
rails generate react_on_rails:install

# install
bundle &amp;amp;&amp;amp; npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are few things to know about &lt;code&gt;react_on_rails&lt;/code&gt; gem, which can be confusing for starters like me.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# You expose your react module so that it can be available outside
import ReactOnRails from &#39;react-on-rails&#39;;

# register you component
ReactOnRails.register({ Counter });
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# you should also keep in mind that when creating new .jsx files
# you should add its path to webpack.config.js entry hash as
const config = {
  entry: [
    &#39;es5-shim/es5-shim&#39;,
    &#39;es5-shim/es5-sham&#39;,
    &#39;babel-polyfill&#39;,
    &#39;./app/welcome/Counter&#39;, // like this
  ],
  .........
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Make sure your Node js version is greater than 5, react_on_rails gem has this requirement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;add-mobx-and-mobx-react&#34;&gt;Add Mobx and Mobx React&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# After previous step you will have a client folder
# inside that folder edit the package.json and add the below lines to the dependencies list

&amp;quot;mobx-react&amp;quot;: &amp;quot;^3.5.6&amp;quot;,
&amp;quot;mobx&amp;quot;: &amp;quot;^2.5.1&amp;quot;

# If you will want to use decorators with mobx then make your .babelrc file look something like this

{
  &amp;quot;presets&amp;quot;: [&amp;quot;es2015&amp;quot;, &amp;quot;stage-0&amp;quot;, &amp;quot;react&amp;quot;],
  &amp;quot;plugins&amp;quot;: [&amp;quot;transform-decorators-legacy&amp;quot;]
}

# I was also required to install
npm install babel-plugin-transform-decorators-legacy --save-dev

# finally do npm install to install newly added dependencies
npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bring-it-up&#34;&gt;Bring it Up&lt;/h2&gt;

&lt;p&gt;Now you are all set to bring your system up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# create all the database if you are using postgresql as database, else skip, you will need to run this step if you use the boilerplate code
rails db:create # use rake db:create in rails 4 or below

# start the server and webpack client for transpilation
foreman start -f Procfile.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope you were successfully able to get your system up and running. If I missed something or you have some doubts, do let me know in the comments below. Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Things Beginners Find Confusing About React.js</title>
      <link>http://classandobjects.com/tutorial/confusing_things_in_react/</link>
      <pubDate>Fri, 09 Sep 2016 20:12:23 +0530</pubDate>
      
      <guid>http://classandobjects.com/tutorial/confusing_things_in_react/</guid>
      <description>

&lt;p&gt;React js is currently the most hyped front-end framework(view) today. I am lucky that at my current workplace I am getting a chance to explore react and rails. I am a Python lover, but I am completely open to learning new technologies. I have seen confusing things in Ruby on Rails which is very opposite to React and Javascript environment. I am trying to list out things every react js beginner should know. I have pointed out top 5 reasons why React js can be confusing. So let us get started.&lt;/p&gt;

&lt;h2 id=&#34;1-react-is-just-the-view-layer&#34;&gt;1. React is just the view layer&lt;/h2&gt;

&lt;p&gt;You will not understand what does this mean, I didn&amp;rsquo;t, and it is ok. If you already do not have some understanding of what modern MVC front-end frameworks are then this definition is almost useless. In a simple way, view layer will simply mean a replacement for your HTML, CSS and Javascript(umm.. maybe). These three things make up the view of any web application. So React js provides us with a way to write things in a reusable and powerful way. You still have to do all the things like AJAX, data handling, function naming convention, etc in you own fashion. This gives you a lot of flexibility but at a reduced speed of development.&lt;/p&gt;

&lt;h2 id=&#34;2-jsx-is-not-html-or-xml&#34;&gt;2. JSX is not HTML or XML&lt;/h2&gt;

&lt;p&gt;React is aimed at being developer friendly and I second it. It uses an XML-like syntax called JSX. It will look like normal HTML, but has few catches. &lt;code&gt;class&lt;/code&gt; is a reserved keyword so you have to use &lt;code&gt;className&lt;/code&gt;, this means you cannot use your HTML code directly, you will have to do a bunch of replacements.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;## Normal HTML
&amp;lt;div class=&amp;quot;row&amp;quot; ... &amp;gt;
## Syntax for React
&amp;lt;div className=&amp;quot;row&amp;quot; ...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are other catches you need to remember, you cannot use independent HTML tags like &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, it is required that you close them like &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Always beware of these gaps as you tend to overlook them, even the error messaging cannot help you much.&lt;/p&gt;

&lt;h2 id=&#34;3-what-should-be-a-component&#34;&gt;3.  What should be a Component?&lt;/h2&gt;

&lt;p&gt;There is an opinion on what you should make into a component. There are people who believe that any piece of code that is supposed to be used again should be made into a component while other want to do so when you are dealing with states. This is not a big issue, but you will have to adjust yourself according to the developer culture you find yourself in.&lt;/p&gt;

&lt;h2 id=&#34;4-multiple-syntax-options&#34;&gt;4. Multiple syntax options&lt;/h2&gt;

&lt;p&gt;Javascript is evolving very fast with the advent of these new front-end frameworks. The current syntax is called as ES6 or ES2015, which is a bit different than the older version. This can be very confusing if you do not know this. In your quest to find something you may find resources which can be following the older syntax or the newer one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;## Older Syntax
var aComponent = React.createClass({
  function: render() { ... }
});

## Newer ES6 Syntax
class ComponentB extends React.Component {
  render() { ... }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find the use of the both the syntax in React official documentation. They both work fine but try avoiding mixing them up  and stick to the newer ES6 style.&lt;/p&gt;

&lt;h2 id=&#34;5-how-to-use-it-with-your-existing-application&#34;&gt;5. How to use it with your existing application&lt;/h2&gt;

&lt;p&gt;React is an independent layer which you will want to include in your already existing full stack solution. They could be a bit daunting. To me using webpack and browsify are a task in themselves. In Rails, we have &lt;code&gt;react-rails&lt;/code&gt; gem which make the task very easy. Undoubtedly there are similar efforts in other community as well. You will find many ways to integrate react, try using the easier one and upgrade as your need increases.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As my conclusion, I will say that React js seem like it will stay in the market for a long time. Even if it does not, it is very easy to learn and does not require a lot of concepts. It is fast and keeps your code DRY. You should try React if you have not tried it yet. It is fun.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>